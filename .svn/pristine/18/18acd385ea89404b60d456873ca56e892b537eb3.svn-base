<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>CvWorks: D:/FURG/Software/CvWorksRelease1/Components/VisionImplementationCv/ARTagDetectorBLP.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="C3.jpg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">CvWorks
   &#160;<span id="projectnumber">0.4</span>
   </div>
   <div id="projectbrief">Computer Vision Framework</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_a_r_tag_detector_b_l_p_8cpp_source.html','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ARTagDetectorBLP.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">Copyright (c) 2015, FURG - Universidade Federal do Rio Grande</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">All rights reserved.</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">Redistribution and use in source and binary forms, with or without</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">modification, are permitted provided that the following conditions are met:</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">    * Redistributions of source code must retain the above copyright</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">      notice, this list of conditions and the following disclaimer.</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">    * Redistributions in binary form must reproduce the above copyright</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">      notice, this list of conditions and the following disclaimer in the</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">      documentation and/or other materials provided with the distribution.</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">    * Neither the name of the Universidade Federal do Rio Grande nor the</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">      names of its contributors may be used to endorse or promote products</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">      derived from this software without specific prior written permission.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">DISCLAIMED. IN NO EVENT SHALL UNIVERSIDADE FEDERAL DO RIO GRANDE BE LIABLE FOR ANY</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">// Master include file</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;VisionImplementationCv.h&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div>
<div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="namespace_viscv.html">   31</a></span>&#160;<span class="keyword">namespace </span><a class="code" href="namespace_viscv.html">Viscv</a>{</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div>
<div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="class_viscv_1_1_a_r_tag_detector_b_l_p.html#a694456c6ce2eaf188d47f4cb61a859b7">   33</a></span>&#160;<a class="code" href="class_viscv_1_1_a_r_tag_detector_b_l_p.html#a694456c6ce2eaf188d47f4cb61a859b7">ARTagDetectorBLP::ARTagDetectorBLP</a>()</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        : tagHeight(50)</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        , tagWidth(50) </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        , borderSize(5)</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        , enrolledTags()</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        , binarizationThreshold(90)</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    {</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="comment">// Cadastra algumas tags</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keyword">const</span> std::string tagPath=<span class="stringliteral">&quot;..\\..\\Files\\AugmentedRealityTags\\&quot;</span>;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        cv::Mat img;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        img = cv::imread(tagPath+<span class="stringliteral">&quot;4x4_384_79.png&quot;</span>, CV_LOAD_IMAGE_GRAYSCALE);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        this-&gt;<a class="code" href="class_viscv_1_1_a_r_tag_detector_b_l_p.html#a71fdd952985e3be53e73443a02b07cfe">enrollTag</a>(img,<span class="stringliteral">&quot;tag1&quot;</span>);</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    }</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="class_viscv_1_1_a_r_tag_detector_b_l_p.html#aac8748a45253d9b678b66b5ce8ac0edd">   49</a></span>&#160;    <a class="code" href="class_viscv_1_1_a_r_tag_detector_b_l_p.html#aac8748a45253d9b678b66b5ce8ac0edd">ARTagDetectorBLP::~ARTagDetectorBLP</a>(<span class="keywordtype">void</span>)</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    {</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    }</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="comment">// Detecta e identifica as tags.</span></div>
<div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="class_viscv_1_1_a_r_tag_detector_b_l_p.html#a0065a0a0e3dbed236849bf406e6cde66">   54</a></span>&#160;    std::vector&lt;ARTag&gt; <a class="code" href="class_viscv_1_1_a_r_tag_detector_b_l_p.html#a0065a0a0e3dbed236849bf406e6cde66">ARTagDetectorBLP::detect</a>(<span class="keyword">const</span> cv::Mat&amp; img)<span class="keyword"> const</span>{</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        std::vector&lt;ARTag&gt; tagList;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        cv::Mat gray;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        cv::cvtColor(img, gray, CV_BGR2GRAY);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="comment">// Detecta o contorno externo das tags.</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        std::vector&lt;Polygon&lt;int,4&gt;&gt; boxes = detectTagBox(gray);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="comment">// Identifica a tagID de cada uma das tags encontradas.</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <a class="code" href="class_viscv_1_1_polygon.html">Polygon&lt;int,4&gt;</a>&amp; tagBox : boxes){</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="comment">// Extrai a imagem interna de uma tag como se fosse vista de frente.</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            cv::Mat tagImgCore;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            extractCoreTag(gray,tagBox,tagImgCore);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <span class="comment">// Faz o matching entre a tag encontrada e as tags cadastradas</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            std::string tagID=<span class="stringliteral">&quot;Unknown&quot;</span>;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="keywordtype">double</span> minMatch = 10000000000.0;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">double</span> threshold = 10000000000.0;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">const</span> std::pair&lt;cv::Mat,std::string&gt;&amp; enrolledTag : enrolledTags){</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                <span class="keyword">const</span> cv::Mat tagImg = enrolledTag.first;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                <span class="keywordtype">double</span> match = matchTag(tagImg,tagImgCore);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                <span class="comment">// encontra a tag com menor valor de matching</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                <span class="keywordflow">if</span>(match&lt;minMatch &amp;&amp; match&lt;threshold){</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                    minMatch=match;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                    tagID=enrolledTag.second;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                }</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            }</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <a class="code" href="class_viscv_1_1_a_r_tag.html">ARTag</a> tag(tagBox,tagID);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            tagList.push_back(tag);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        }</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="keywordflow">return</span> tagList;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    }</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div>
<div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="class_viscv_1_1_a_r_tag_detector_b_l_p.html#a71fdd952985e3be53e73443a02b07cfe">   87</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="class_viscv_1_1_a_r_tag_detector_b_l_p.html#a71fdd952985e3be53e73443a02b07cfe">ARTagDetectorBLP::enrollTag</a>(<span class="keyword">const</span> cv::Mat&amp; tagImg,<span class="keyword">const</span> std::string&amp; tagName){</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        std::pair&lt;cv::Mat,std::string&gt; tagData(tagImg,tagName);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        enrolledTags.push_back(tagData);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    }</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    std::vector&lt;Polygon&lt;int,4&gt;&gt; ARTagDetectorBLP::detectTagBox(<span class="keyword">const</span> cv::Mat&amp; img)<span class="keyword"> const</span>{</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;         <span class="comment">// Binariza a imagem</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        cv::Mat binary;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;         cv::threshold(img, binary, <a class="code" href="class_viscv_1_1_a_r_tag_detector_b_l_p.html#a0ebf501c4c0e6e53d9695a43466ea184">binarizationThreshold</a>, 255, cv::THRESH_BINARY_INV);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="comment">// Acha contornos dos blobs</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        cv::Mat contourOutput = binary.clone();</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        std::vector&lt;std::vector&lt;cv::Point&gt; &gt; contours;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        cv::Mat hierarchy;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        cv::findContours( contourOutput, contours, hierarchy,CV_RETR_LIST  , CV_CHAIN_APPROX_SIMPLE );</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="comment">// Aproxima os contornos externos com um polinômio</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        std::vector&lt;std::vector&lt;cv::Point&gt; &gt; contoursPoly( contours.size() );</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">for</span>( <span class="keywordtype">unsigned</span> i = 0; i &lt; contours.size(); i++ )</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        { </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            approxPolyDP( cv::Mat(contours[i]), contoursPoly[i], 10, <span class="keyword">true</span> );</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        }</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        std::vector&lt;Polygon&lt;int,4&gt;&gt; poly4;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="comment">// Pega somente os contornos com quatro pontos (retângulos)</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">for</span>( <span class="keyword">auto</span> &amp;c : contoursPoly )</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        {   </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keywordflow">if</span> (c.size()==4){</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                <span class="comment">//Verifica se é quadrado: linhas opostas devem ser paralelas</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                <span class="comment">//Calcula angulo de cada reta do polygono</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                <span class="keywordtype">double</span> theta0 = atan2((<span class="keywordtype">double</span>)c[1].y-c[0].y,(<span class="keywordtype">double</span>)c[1].x-c[0].x);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                <span class="keywordtype">double</span> theta1 = atan2((<span class="keywordtype">double</span>)c[2].y-c[1].y,(<span class="keywordtype">double</span>)c[2].x-c[1].x);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                <span class="keywordtype">double</span> theta2 = atan2((<span class="keywordtype">double</span>)c[2].y-c[3].y,(<span class="keywordtype">double</span>)c[2].x-c[3].x);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                <span class="keywordtype">double</span> theta3 = atan2((<span class="keywordtype">double</span>)c[3].y-c[0].y,(<span class="keywordtype">double</span>)c[3].x-c[0].x);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                <span class="keywordtype">double</span> t=0.1; <span class="comment">//tolerancia para igualdade em radianos</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                <span class="keywordflow">if</span>(abs(theta0-theta2)&lt;t &amp;&amp; abs(theta1-theta3)&lt;t){</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    Polygon&lt;&gt; p;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    p.vertices[0]=c[0];</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    p.vertices[1]=c[1];</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                    p.vertices[2]=c[2];</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                    p.vertices[3]=c[3];</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                    poly4.push_back(p);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            }</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        }</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordflow">return</span> poly4;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    }</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordtype">void</span> ARTagDetectorBLP::extractCoreTag(<span class="keyword">const</span> cv::Mat&amp; img,<span class="keyword">const</span> Polygon&lt;int,4&gt;&amp; tagBox, cv::Mat&amp; tagImgOut)<span class="keyword"> const</span>{</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="comment">// Inicialmente, calcula a matriz de homografia. Então transforma a região da tag para vista frontal e retira as bordas de contorno,</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="comment">// resultando em uma imagem frontal do núcleo da tag.</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="comment">// converte pontos do contorno da tag para formato da opencv</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        std::vector&lt;cv::Point2f&gt; srcPoints;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0;i&lt;4;i++){</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            cv::Point2f p(static_cast&lt;float&gt;(tagBox.vertices[i].x),</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                          static_cast&lt;float&gt;(tagBox.vertices[i].x));</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            srcPoints.push_back(p);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        }</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="comment">// define os limites padrões da tag (vista frontal com tamanho padrão)</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        std::vector&lt;cv::Point2f&gt; dstPoints;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        dstPoints.push_back(cv::Point2f(0,0));</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        dstPoints.push_back(cv::Point2f(0,static_cast&lt;float&gt;(tagWidth-1)));</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        dstPoints.push_back(cv::Point2f(static_cast&lt;float&gt;(tagHeight-1),static_cast&lt;float&gt;(tagWidth-1)));</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        dstPoints.push_back(cv::Point2f(static_cast&lt;float&gt;(tagHeight-1),0));</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="comment">// calcula matriz de homografia que converte os pontos da tag para a vista frontal</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        cv::Mat H = cv::findHomography(srcPoints,dstPoints);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="comment">// transforma região da tag utilizando a matrix de homografia</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        cv::Mat tagImg;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        cv::warpPerspective(img,tagImg,H,cv::Size(tagWidth,tagHeight));</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="comment">// remove bordas externas da tag</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        cv::Rect c(<a class="code" href="class_viscv_1_1_a_r_tag_detector_b_l_p.html#acc427385dd28416f812523874f4d6502">borderSize</a>,<a class="code" href="class_viscv_1_1_a_r_tag_detector_b_l_p.html#acc427385dd28416f812523874f4d6502">borderSize</a>,tagWidth-2*<a class="code" href="class_viscv_1_1_a_r_tag_detector_b_l_p.html#acc427385dd28416f812523874f4d6502">borderSize</a>,tagHeight-2*<a class="code" href="class_viscv_1_1_a_r_tag_detector_b_l_p.html#acc427385dd28416f812523874f4d6502">borderSize</a>);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        tagImgOut=tagImg(c);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    }</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keywordtype">double</span> ARTagDetectorBLP::matchTag(<span class="keyword">const</span> cv::Mat&amp; img,<span class="keyword">const</span> cv::Mat&amp; tagCoreImg)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        cv::Mat imgResized;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        cv::resize(img,imgResized,cv::Size(this-&gt;tagWidth-2*this-&gt;<a class="code" href="class_viscv_1_1_a_r_tag_detector_b_l_p.html#acc427385dd28416f812523874f4d6502">borderSize</a>,this-&gt;tagHeight-2*this-&gt;<a class="code" href="class_viscv_1_1_a_r_tag_detector_b_l_p.html#acc427385dd28416f812523874f4d6502">borderSize</a>));</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keywordtype">double</span> distance = cv::norm(imgResized,tagCoreImg,cv::NORM_L2);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">return</span> distance;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;}</div>
<div class="ttc" id="class_viscv_1_1_a_r_tag_html"><div class="ttname"><a href="class_viscv_1_1_a_r_tag.html">Viscv::ARTag</a></div><div class="ttdoc">Defines a augmented reality tag, which contains a bounding polygon and a tag ID. </div><div class="ttdef"><b>Definition:</b> <a href="_a_r_tag_detector_b_l_p_8h_source.html#l00044">ARTagDetectorBLP.h:44</a></div></div>
<div class="ttc" id="class_viscv_1_1_a_r_tag_detector_b_l_p_html_a694456c6ce2eaf188d47f4cb61a859b7"><div class="ttname"><a href="class_viscv_1_1_a_r_tag_detector_b_l_p.html#a694456c6ce2eaf188d47f4cb61a859b7">Viscv::ARTagDetectorBLP::ARTagDetectorBLP</a></div><div class="ttdeci">ARTagDetectorBLP()</div><div class="ttdoc">Defult constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_a_r_tag_detector_b_l_p_8cpp_source.html#l00033">ARTagDetectorBLP.cpp:33</a></div></div>
<div class="ttc" id="namespace_viscv_html"><div class="ttname"><a href="namespace_viscv.html">Viscv</a></div><div class="ttdoc">Provides several computer vision methods for detection an. </div><div class="ttdef"><b>Definition:</b> <a href="_a_r_tag_detector_b_l_p_8cpp_source.html#l00031">ARTagDetectorBLP.cpp:31</a></div></div>
<div class="ttc" id="class_viscv_1_1_a_r_tag_detector_b_l_p_html_a0065a0a0e3dbed236849bf406e6cde66"><div class="ttname"><a href="class_viscv_1_1_a_r_tag_detector_b_l_p.html#a0065a0a0e3dbed236849bf406e6cde66">Viscv::ARTagDetectorBLP::detect</a></div><div class="ttdeci">std::vector&lt; ARTag &gt; detect(const cv::Mat &amp;img) const </div><div class="ttdoc">Detects objects in the image and returns a vector with the detected objects. </div><div class="ttdef"><b>Definition:</b> <a href="_a_r_tag_detector_b_l_p_8cpp_source.html#l00054">ARTagDetectorBLP.cpp:54</a></div></div>
<div class="ttc" id="class_viscv_1_1_a_r_tag_detector_b_l_p_html_a71fdd952985e3be53e73443a02b07cfe"><div class="ttname"><a href="class_viscv_1_1_a_r_tag_detector_b_l_p.html#a71fdd952985e3be53e73443a02b07cfe">Viscv::ARTagDetectorBLP::enrollTag</a></div><div class="ttdeci">void enrollTag(const cv::Mat &amp;tagImg, const std::string &amp;tagName)</div><div class="ttdoc">Enrolls new tags. </div><div class="ttdef"><b>Definition:</b> <a href="_a_r_tag_detector_b_l_p_8cpp_source.html#l00087">ARTagDetectorBLP.cpp:87</a></div></div>
<div class="ttc" id="class_viscv_1_1_a_r_tag_detector_b_l_p_html_a0ebf501c4c0e6e53d9695a43466ea184"><div class="ttname"><a href="class_viscv_1_1_a_r_tag_detector_b_l_p.html#a0ebf501c4c0e6e53d9695a43466ea184">Viscv::ARTagDetectorBLP::binarizationThreshold</a></div><div class="ttdeci">int binarizationThreshold</div><div class="ttdoc">Threshold used in image binarization. </div><div class="ttdef"><b>Definition:</b> <a href="_a_r_tag_detector_b_l_p_8h_source.html#l00089">ARTagDetectorBLP.h:89</a></div></div>
<div class="ttc" id="class_viscv_1_1_a_r_tag_detector_b_l_p_html_acc427385dd28416f812523874f4d6502"><div class="ttname"><a href="class_viscv_1_1_a_r_tag_detector_b_l_p.html#acc427385dd28416f812523874f4d6502">Viscv::ARTagDetectorBLP::borderSize</a></div><div class="ttdeci">int borderSize</div><div class="ttdoc">Tag border size. </div><div class="ttdef"><b>Definition:</b> <a href="_a_r_tag_detector_b_l_p_8h_source.html#l00086">ARTagDetectorBLP.h:86</a></div></div>
<div class="ttc" id="class_viscv_1_1_a_r_tag_detector_b_l_p_html_aac8748a45253d9b678b66b5ce8ac0edd"><div class="ttname"><a href="class_viscv_1_1_a_r_tag_detector_b_l_p.html#aac8748a45253d9b678b66b5ce8ac0edd">Viscv::ARTagDetectorBLP::~ARTagDetectorBLP</a></div><div class="ttdeci">~ARTagDetectorBLP()</div><div class="ttdoc">Destructor. </div><div class="ttdef"><b>Definition:</b> <a href="_a_r_tag_detector_b_l_p_8cpp_source.html#l00049">ARTagDetectorBLP.cpp:49</a></div></div>
<div class="ttc" id="class_viscv_1_1_polygon_html"><div class="ttname"><a href="class_viscv_1_1_polygon.html">Viscv::Polygon&lt; int, 4 &gt;</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_08f45fe6822aeb4ce2bc268e3b1361be.html">Components</a></li><li class="navelem"><a class="el" href="dir_2fdce97c586a401d447ba676d44751b7.html">VisionImplementationCv</a></li><li class="navelem"><b>ARTagDetectorBLP.cpp</b></li>
    <li class="footer">Generated on Wed Nov 18 2015 11:12:06 for CvWorks by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.10 </li>
  </ul>
</div>
</body>
</html>
