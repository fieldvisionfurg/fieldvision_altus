<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>CvWorks: D:/FURG/Software/CvWorksRelease1/Components/FireDetector/FireTrackerCT.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="C3.jpg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">CvWorks
   &#160;<span id="projectnumber">0.4</span>
   </div>
   <div id="projectbrief">Computer Vision Framework</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_fire_tracker_c_t_8cpp_source.html','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">FireTrackerCT.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">Copyright (c) 2015, FURG - Universidade Federal do Rio Grande</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">All rights reserved.</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">Redistribution and use in source and binary forms, with or without</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">modification, are permitted provided that the following conditions are met:</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">    * Redistributions of source code must retain the above copyright</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">      notice, this list of conditions and the following disclaimer.</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">    * Redistributions in binary form must reproduce the above copyright</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">      notice, this list of conditions and the following disclaimer in the</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">      documentation and/or other materials provided with the distribution.</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">    * Neither the name of the Universidade Federal do Rio Grande nor the</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">      names of its contributors may be used to endorse or promote products</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">      derived from this software without specific prior written permission.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">DISCLAIMED. IN NO EVENT SHALL UNIVERSIDADE FEDERAL DO RIO GRANDE BE LIABLE FOR ANY</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;FireTrackerCT.h&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">//Constructor</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">//Params:</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">// historySize is how many frames are evaluated to check motion</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">// minMovement is the minimal times the pixel value has to change in order to be considered as fire like movement</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">// motionMethod is the flickering method</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">// colourMethod is the method used to make the colour segmentation</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;FireTrackerCT::FireTrackerCT(<span class="keywordtype">int</span> historySize, <span class="keywordtype">int</span> minMovement, <span class="keywordtype">int</span> motionMethod, <span class="keywordtype">int</span> colourMethod, <span class="keywordtype">int</span> grayMethod)</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    _historySize = historySize; _minMovement = minMovement; _motionMethod = motionMethod; <a class="code" href="class_fire_tracker_c_t.html#af17314d3b3ad16b256629df60fdc60d4">_colourMethod</a> = colourMethod; _grayMethod = grayMethod;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    mvmt.historySize = _historySize;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;}</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;FireTrackerCT::~FireTrackerCT(<span class="keywordtype">void</span>)</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;}</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div>
<div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="class_fire_tracker_c_t.html#ac7e0977fa702f98038bbe303df458a6c">   48</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="class_fire_tracker_c_t.html#ac7e0977fa702f98038bbe303df458a6c">FireTrackerCT::lostTrack</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="comment">//return m_lostTrack;</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div>
<div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="class_fire_tracker_c_t.html#ae1ccd303e827f5d00620e54bb11a968c">   54</a></span>&#160;<span class="keyword">const</span> std::vector&lt;std::vector&lt;cv::Point&gt;&gt;&amp; <a class="code" href="class_fire_tracker_c_t.html#ae1ccd303e827f5d00620e54bb11a968c">FireTrackerCT::getLastTrack</a>()</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">return</span> m_currentTrack;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;}</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div>
<div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="class_fire_tracker_c_t.html#ab233da15b6c7aad7d83c67057a558bd4">   61</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="class_fire_tracker_c_t.html#ab233da15b6c7aad7d83c67057a558bd4">FireTrackerCT::update</a>(<span class="keyword">const</span> <a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html">VisionCore::Frame&lt;cv::Mat&gt;</a>&amp; frame) {</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    cv::Mat img = frame.<a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html#a8531d354b20874961d98c796e3973b4d">getImg</a>();</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    cv::Mat bin, changeCount, grayFrame, colorFiltered;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="comment">//Filters the colours in order to choose only fire coloured regions</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="class_fire_tracker_c_t.html#af17314d3b3ad16b256629df60fdc60d4">_colourMethod</a>){</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordflow">case</span> FIRE_COLOUR_HSV_THRESHOLD:</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        colorFiltered = FireColorDetectorCT::getThresholdedImageHSV(img, cv::Scalar(0,0,200), cv::Scalar(75,150,256));</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordflow">case</span> FIRE_COLOUR_NGUYEN_2013:</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        colorFiltered = FireColorDetectorCT::getThresholdedImageNguyenTi(img);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">case</span> FIRE_COLOUR_ZHOU_2010:</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        colorFiltered = FireColorDetectorCT::getThresholdedImageBGRZhou(img);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordflow">case</span> FIRE_COLOUR_CHAO_2004:</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        colorFiltered = FireColorDetectorCT::getThresholdedImageChen(img);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordflow">case</span> FIRE_COLOUR_CELIK_2009:</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        colorFiltered = FireColorDetectorCT::getThresholdedImageBGRCelik(img);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">case</span> FIRE_COLOUR_CELIK_2007:</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        colorFiltered = FireColorDetectorCT::getThresholdedImageBGRCelik2(img);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">case</span> FIRE_COLOUR_CELIK_2010:</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        colorFiltered = FireColorDetectorCT::getThresholdedImageLABCelik(img);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">case</span> FIRE_COLOUR_YCbCr:</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        colorFiltered = FireColorDetectorCT::getThresholdedImageYCbCr(img);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">case</span> FIRE_COLOUR_BRG_THRESHOLD:</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        colorFiltered = FireColorDetectorCT::getThresholdedImageBGR(img);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">case</span> FIRE_COLOUR_BRG_GAUSSIAN:</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        colorFiltered = FireColorDetectorCT::getGaussianRGBFiltered(img);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="comment">//cv::imshow(&quot;colorFiltered&quot;, colorFiltered);</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        colorFiltered = FireColorDetectorCT::getThresholdedImageHSV(img, cv::Scalar(0,0,200), cv::Scalar(75,150,256));</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="comment">//TODO...</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    }</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="comment">//Gray scale method</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    std::vector&lt;cv::Mat&gt; bgr_channels;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">switch</span> (_grayMethod){</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">case</span> GRAY_STEFFENS:</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        grayFrame = FireColorDetectorCT::toGraySteffens(img);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">case</span> GRAY_ZHOU:</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        grayFrame = FireColorDetectorCT::toGrayZhou(img);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">case</span> GRAY_MEAN:</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        cv::cvtColor(img, grayFrame, cv::COLOR_BGR2GRAY);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">case</span> GRAY_ONLY_RED_CHANNEL:</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        cv::split(img, bgr_channels);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        grayFrame = bgr_channels[2].clone();</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        grayFrame = FireColorDetectorCT::toGraySteffens(img);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    }</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="comment">//Motion</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">switch</span> (_motionMethod){</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">case</span> MOTION_COLLINS:</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        mvmt.collinsMotion(grayFrame, bin, 20);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        mvmt.getChangeCount(changeCount);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="comment">//apply the min movement threshold</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        cv::threshold(changeCount, changeCount, _minMovement, _historySize, cv::THRESH_BINARY);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">case</span> MOTION_CONTOUR_BASED:</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        mvmt.contoursMotion(grayFrame, bin, _minMovement);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="comment">//mvmt.contoursMotion(grayFrame, bin, 0);</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        mvmt.getChangeAbsDiff(changeCount);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        mvmt.collinsMotion(img, bin, 30);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="comment">//TODO...</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    </div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    std::vector&lt;std::vector&lt;cv::Point&gt; &gt; contoursColor;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    std::vector&lt;cv::Vec4i&gt; hierarchy;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    cv::Mat tmp;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="comment">//bitwise and between the gray image and color segmentation</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    cv::bitwise_and(grayFrame, colorFiltered, tmp);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    cv::findContours( tmp, contoursColor, hierarchy, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE, cv::Point(0, 0));</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> i=0; i&lt; contoursColor.size(); i++){</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        approxPolyDP( cv::Mat(contoursColor[i]), contoursColor[i], 1, <span class="keyword">true</span> );</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    }</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    cv::Mat k = cv::getGaussianKernel(5, .7);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="comment">//bitwise and between the gray image and color segmentation</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    dilate(changeCount, changeCount, k);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    cv::bitwise_and(colorFiltered, changeCount, changeCount);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="comment">//erode(changeCount, changeCount, cv::Mat(2,2,changeCount.type()));</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    </div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    m_currentTrack.clear();</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="comment">//parallel for</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="preprocessor">#pragma loop(hint_parallel(0))</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordflow">for</span>( <span class="keywordtype">unsigned</span> i = 0; i&lt; contoursColor.size(); i++ )</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    {</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="comment">// contour</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="keywordflow">if</span>(20 &lt; contourArea(contoursColor[i])){</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            <span class="keywordflow">if</span>(inCheckedContour(changeCount, contoursColor, i)){</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                m_currentTrack.push_back(contoursColor[i]);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            }</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    }</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keywordflow">for</span>( <span class="keywordtype">int</span> i = 0; i&lt; contoursColor.size(); i++ )</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    {</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        drawContours( img, contoursColor, i, cv::Scalar(0,255,0), 2, 8, vector&lt;cv::Vec4i&gt;(), 0, cv::Point() );</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    }</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keywordflow">for</span>( <span class="keywordtype">int</span> i = 0; i&lt; m_currentTrack.size(); i++ )</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    {</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        drawContours( img, m_currentTrack, i, cv::Scalar(255,0,0), 2, 8, vector&lt;cv::Vec4i&gt;(), 0, cv::Point() );</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    }</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    cv::normalize(changeCount, changeCount, 0, 255, cv::NORM_MINMAX);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    cv::imshow(<span class="stringliteral">&quot;changes&quot;</span>, changeCount);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    cv::normalize(grayFrame, grayFrame, 0, 255, cv::NORM_MINMAX);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    cv::imshow(<span class="stringliteral">&quot;grayFrame&quot;</span>, grayFrame);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    cv::imshow(<span class="stringliteral">&quot;colorFiltered&quot;</span>, colorFiltered);</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    cv::imshow(<span class="stringliteral">&quot;frame&quot;</span>, img);</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;}</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="keywordtype">int</span> FireTrackerCT::inCheckedContour(cv::Mat &amp;binaryFrame, std::vector&lt;std::vector&lt;cv::Point&gt; &gt; &amp;testedContours, <span class="keywordtype">int</span> index){</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="comment">// Suppose this has the contours of just the car and the obstacle.</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="comment">// create an image filled with zeros, single-channel, same size as img.</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    cv::Mat tested = cv::Mat::zeros(binaryFrame.size(), CV_8UC1 );</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="comment">// contour</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    drawContours( tested, testedContours, index, cv::Scalar::all(255), -1, 8, std::vector&lt;cv::Vec4i&gt;(), 0, cv::Point() );</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="comment">// now AND the two together</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    bitwise_and( binaryFrame, tested, tested);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    cv::Scalar soma = sum(tested);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(soma[0]);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;}</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="keywordtype">void</span> FireTrackerCT::regionFilling(<span class="keyword">const</span> cv::Mat &amp;in, cv::Mat &amp;out, <span class="keywordtype">int</span> thresh , <span class="keywordtype">int</span> maxThresh ){</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    cv::Mat img_gray,img_bw,canny_output,src;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    cv::normalize(in, src, 0, 255, cv::NORM_MINMAX, CV_8UC1);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    out = src.clone();</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    out.setTo(cv::Scalar(0));</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    std::vector&lt;std::vector&lt;cv::Point&gt; &gt; contours;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    std::vector&lt;cv::Vec4i&gt; hierarchy;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    cv::Canny( src, canny_output, thresh, maxThresh, 3 );</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    cv::dilate(canny_output, canny_output, cv::Mat(), cv::Point(-1,-1));</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    cv::findContours( src, contours, hierarchy, cv::RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE, cv::Point(0, 0) );</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    std::vector&lt;cv::Point&gt; approxShape;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; contours.size(); i++){</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        approxPolyDP(contours[i], approxShape, cv::arcLength(cv::Mat(contours[i]), <span class="keyword">true</span>)*0.04, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        drawContours(out, contours, i, cv::Scalar(255), CV_FILLED);   <span class="comment">// fill</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    }</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;}</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="keywordtype">void</span> FireTrackerCT::findFirePosition(cv::Mat thres, cv::Mat &amp;grayScale, std::list&lt;cv::Rect&gt; &amp;fireRect ){</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    </div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    cv::morphologyEx(thres, thres, cv::MORPH_OPEN, cv::Mat());</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    cv::Mat threshold_output;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    std::vector&lt;std::vector&lt;cv::Point&gt; &gt; contours;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    std::vector&lt;cv::Vec4i&gt; hierarchy;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    cv::findContours( thres, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, cv::Point(0, 0) );</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keywordtype">int</span> highestMean = 0;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="preprocessor">    #pragma loop(hint_parallel(0))</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keywordflow">for</span>( <span class="keywordtype">unsigned</span> i = 0; i&lt; contours.size(); i++ ) <span class="comment">// iterate through each contour. </span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    {</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <span class="comment">// Get the mean bright</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <span class="comment">// Get ROI image.</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        cv::Rect roi(cv::boundingRect(contours[i]));</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        cv::Mat crop(grayScale, roi);</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <span class="comment">// Calculate ROI mean.</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        cv::Mat mask(cv::Mat::zeros(crop.rows, crop.cols, CV_8UC1)); <span class="comment">//the mask with the size of cropped image</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        cv::drawContours(mask, contours, i, cv::Scalar(255), CV_FILLED);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="keyword">auto</span> mean(cv::mean(crop, mask));</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <span class="comment">//</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        <span class="keywordflow">if</span>(mean[0] &gt; highestMean){</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            <span class="comment">//Store the index of largest contour</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            <span class="comment">// Find the bounding rectangle for biggest contour</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            highestMean = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(mean[0]);</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        }</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    }</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="preprocessor">    #pragma loop(hint_parallel(0))</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keywordflow">for</span>( <span class="keywordtype">unsigned</span> i = 0; i&lt; contours.size(); i++ )  </div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    {</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        <span class="comment">// iterate through each contour</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        <span class="comment">// Get the mean bright</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        <span class="comment">// Get ROI image.</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        cv::Rect roi(cv::boundingRect(contours[i]));</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        cv::Mat crop(grayScale, roi);</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        <span class="comment">// Calculate ROI mean.</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        cv::Mat mask(cv::Mat::zeros(crop.rows, crop.cols, CV_8UC1)); <span class="comment">//the mask with the size of cropped image</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        <span class="comment">// The offset for drawContours has to be *minus* roi.tl();</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        cv::drawContours(mask, contours, i, cv::Scalar(255), CV_FILLED);</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="keyword">auto</span> mean(cv::mean(crop, mask));</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        <span class="keywordflow">if</span> (mean[0] &gt; highestMean * 0)</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        {</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            <span class="comment">//Only the biggest area rectangles are returned</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            fireRect.push_back(boundingRect(contours[i]));</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        }</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    }</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;}</div>
<div class="ttc" id="class_fire_tracker_c_t_html_ac7e0977fa702f98038bbe303df458a6c"><div class="ttname"><a href="class_fire_tracker_c_t.html#ac7e0977fa702f98038bbe303df458a6c">FireTrackerCT::lostTrack</a></div><div class="ttdeci">bool lostTrack() const </div><div class="ttdoc">Returns true if the tracker lost the object track. </div><div class="ttdef"><b>Definition:</b> <a href="_fire_tracker_c_t_8cpp_source.html#l00048">FireTrackerCT.cpp:48</a></div></div>
<div class="ttc" id="struct_vision_core_1_1_data_structures_1_1_frame_html_a8531d354b20874961d98c796e3973b4d"><div class="ttname"><a href="struct_vision_core_1_1_data_structures_1_1_frame.html#a8531d354b20874961d98c796e3973b4d">VisionCore::DataStructures::Frame::getImg</a></div><div class="ttdeci">const TImg &amp; getImg() const </div><div class="ttdoc">Returns a reference to the frame image. </div><div class="ttdef"><b>Definition:</b> <a href="_vision_data_structures_8h_source.html#l00084">VisionDataStructures.h:84</a></div></div>
<div class="ttc" id="class_fire_tracker_c_t_html_af17314d3b3ad16b256629df60fdc60d4"><div class="ttname"><a href="class_fire_tracker_c_t.html#af17314d3b3ad16b256629df60fdc60d4">FireTrackerCT::_colourMethod</a></div><div class="ttdeci">int _colourMethod</div><div class="ttdoc">Colour segmentation Method. </div><div class="ttdef"><b>Definition:</b> <a href="_fire_tracker_c_t_8h_source.html#l00079">FireTrackerCT.h:79</a></div></div>
<div class="ttc" id="class_fire_tracker_c_t_html_ab233da15b6c7aad7d83c67057a558bd4"><div class="ttname"><a href="class_fire_tracker_c_t.html#ab233da15b6c7aad7d83c67057a558bd4">FireTrackerCT::update</a></div><div class="ttdeci">void update(const VisionCore::Frame&lt; cv::Mat &gt; &amp;frame)</div><div class="ttdoc">Given an image (i.e. video frame), update the tracked objects. </div><div class="ttdef"><b>Definition:</b> <a href="_fire_tracker_c_t_8cpp_source.html#l00061">FireTrackerCT.cpp:61</a></div></div>
<div class="ttc" id="class_fire_tracker_c_t_html_ae1ccd303e827f5d00620e54bb11a968c"><div class="ttname"><a href="class_fire_tracker_c_t.html#ae1ccd303e827f5d00620e54bb11a968c">FireTrackerCT::getLastTrack</a></div><div class="ttdeci">const std::vector&lt; std::vector&lt; cv::Point &gt; &gt; &amp; getLastTrack()</div><div class="ttdoc">Returns a reference to the current estimated object state. </div><div class="ttdef"><b>Definition:</b> <a href="_fire_tracker_c_t_8cpp_source.html#l00054">FireTrackerCT.cpp:54</a></div></div>
<div class="ttc" id="struct_vision_core_1_1_data_structures_1_1_frame_html"><div class="ttname"><a href="struct_vision_core_1_1_data_structures_1_1_frame.html">VisionCore::DataStructures::Frame&lt; cv::Mat &gt;</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_08f45fe6822aeb4ce2bc268e3b1361be.html">Components</a></li><li class="navelem"><a class="el" href="dir_a61f198d05b3512ab3b81e6e6e82d3ea.html">FireDetector</a></li><li class="navelem"><b>FireTrackerCT.cpp</b></li>
    <li class="footer">Generated on Wed Nov 18 2015 11:12:06 for CvWorks by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.10 </li>
  </ul>
</div>
</body>
</html>
