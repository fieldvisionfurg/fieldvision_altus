<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>CvWorks: AsyncFrameServerWrap&lt; TImg &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="C3.jpg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">CvWorks
   &#160;<span id="projectnumber">0.4</span>
   </div>
   <div id="projectbrief">Computer Vision Framework</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.html"><span>Classes</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.html"><span>Class&#160;List</span></a></li>
      <li><a href="inherits.html"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.html"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('class_vision_core_1_1_async_1_1_async_frame_server_wrap.html','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="class_vision_core_1_1_async_1_1_async_frame_server_wrap-members.html">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">AsyncFrameServerWrap&lt; TImg &gt; Class Template Reference<div class="ingroups"><a class="el" href="group___core.html">Core</a> &raquo; <a class="el" href="group___async.html">Async</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Allows the execution of a frame server asynchronously in an individual thread.  
 <a href="class_vision_core_1_1_async_1_1_async_frame_server_wrap.html#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_vision_async_8h_source.html">VisionAsync.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for AsyncFrameServerWrap&lt; TImg &gt;:</div>
<div class="dyncontent">
<div class="center"><img src="class_vision_core_1_1_async_1_1_async_frame_server_wrap__coll__graph.png" border="0" usemap="#_async_frame_server_wrap_3_01_t_img_01_4_coll__map" alt="Collaboration graph"/></div>
<map name="_async_frame_server_wrap_3_01_t_img_01_4_coll__map" id="_async_frame_server_wrap_3_01_t_img_01_4_coll__map">
</map>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ae8ba94875d13625942e6e478b28fc19b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae8ba94875d13625942e6e478b28fc19b"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vision_core_1_1_async_1_1_async_frame_server_wrap.html#ae8ba94875d13625942e6e478b28fc19b">AsyncFrameServerWrap</a> (<a class="el" href="class_vision_core_1_1_interfaces_1_1_frame_server.html">FrameServer</a>&lt; TImg &gt; *frameServer, int framesPerSecond=-1)</td></tr>
<tr class="memdesc:ae8ba94875d13625942e6e478b28fc19b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor. <br /></td></tr>
<tr class="separator:ae8ba94875d13625942e6e478b28fc19b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04c264bb27b2ac35a81be42f772e0b52"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a04c264bb27b2ac35a81be42f772e0b52"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vision_core_1_1_async_1_1_async_frame_server_wrap.html#a04c264bb27b2ac35a81be42f772e0b52">~AsyncFrameServerWrap</a> ()</td></tr>
<tr class="memdesc:a04c264bb27b2ac35a81be42f772e0b52"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor method. <br /></td></tr>
<tr class="separator:a04c264bb27b2ac35a81be42f772e0b52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60de64d75454385b23995437f1d72669"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vision_core_1_1_async_1_1_async_frame_server_wrap.html#a60de64d75454385b23995437f1d72669">start</a> ()</td></tr>
<tr class="memdesc:a60de64d75454385b23995437f1d72669"><td class="mdescLeft">&#160;</td><td class="mdescRight">Start frame capturing in a individual thread.  <a href="#a60de64d75454385b23995437f1d72669">More...</a><br /></td></tr>
<tr class="separator:a60de64d75454385b23995437f1d72669"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c528baf37154d347366083f0f816846"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8c528baf37154d347366083f0f816846"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vision_core_1_1_async_1_1_async_frame_server_wrap.html#a8c528baf37154d347366083f0f816846">stop</a> ()</td></tr>
<tr class="memdesc:a8c528baf37154d347366083f0f816846"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stops the capture of new frames (works as a pause). <br /></td></tr>
<tr class="separator:a8c528baf37154d347366083f0f816846"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade061155643ea9800e0d385caa9ddc5a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ade061155643ea9800e0d385caa9ddc5a"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vision_core_1_1_async_1_1_async_frame_server_wrap.html#ade061155643ea9800e0d385caa9ddc5a">started</a> () const </td></tr>
<tr class="memdesc:ade061155643ea9800e0d385caa9ddc5a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Indicates if the frames are being captured. <br /></td></tr>
<tr class="separator:ade061155643ea9800e0d385caa9ddc5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8222e52df762c74ec229eba833a6d310"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8222e52df762c74ec229eba833a6d310"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vision_core_1_1_async_1_1_async_frame_server_wrap.html#a8222e52df762c74ec229eba833a6d310">finished</a> () const </td></tr>
<tr class="memdesc:a8222e52df762c74ec229eba833a6d310"><td class="mdescLeft">&#160;</td><td class="mdescRight">Indicates if the video reached the end. <br /></td></tr>
<tr class="separator:a8222e52df762c74ec229eba833a6d310"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a954ec16b07c6dffd3e6fa1c19adde9a7"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a954ec16b07c6dffd3e6fa1c19adde9a7"></a>
std::shared_ptr&lt; <a class="el" href="struct_vision_core_1_1_data_structures_1_1_frame.html">Frame</a>&lt; TImg &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vision_core_1_1_async_1_1_async_frame_server_wrap.html#a954ec16b07c6dffd3e6fa1c19adde9a7">getCurrentFrame</a> ()</td></tr>
<tr class="memdesc:a954ec16b07c6dffd3e6fa1c19adde9a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the most recent captured frame. <br /></td></tr>
<tr class="separator:a954ec16b07c6dffd3e6fa1c19adde9a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a142af7cc4e4839ba5f6db05cc3f5d783"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a142af7cc4e4839ba5f6db05cc3f5d783"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vision_core_1_1_async_1_1_async_frame_server_wrap.html#a142af7cc4e4839ba5f6db05cc3f5d783">lockCurrentFrame</a> ()</td></tr>
<tr class="memdesc:a142af7cc4e4839ba5f6db05cc3f5d783"><td class="mdescLeft">&#160;</td><td class="mdescRight">Blocks the access to last captured frame to the trhead that called this function. <br /></td></tr>
<tr class="separator:a142af7cc4e4839ba5f6db05cc3f5d783"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a246fb6f2273f5066fab7e6cfcb01f322"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a246fb6f2273f5066fab7e6cfcb01f322"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vision_core_1_1_async_1_1_async_frame_server_wrap.html#a246fb6f2273f5066fab7e6cfcb01f322">unlockCurrentFrame</a> ()</td></tr>
<tr class="memdesc:a246fb6f2273f5066fab7e6cfcb01f322"><td class="mdescLeft">&#160;</td><td class="mdescRight">Releases the captured frames to other threads. <br /></td></tr>
<tr class="separator:a246fb6f2273f5066fab7e6cfcb01f322"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd8ac6727051c47ac2b8d695efc63603"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="abd8ac6727051c47ac2b8d695efc63603"></a>
std::thread *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vision_core_1_1_async_1_1_async_frame_server_wrap.html#abd8ac6727051c47ac2b8d695efc63603">getThreadPtr</a> ()</td></tr>
<tr class="memdesc:abd8ac6727051c47ac2b8d695efc63603"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pointer to the internal thread exececuting frame capture. <br /></td></tr>
<tr class="separator:abd8ac6727051c47ac2b8d695efc63603"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f76fa0062ff4d405b8296b356ec6833"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2f76fa0062ff4d405b8296b356ec6833"></a>
std::condition_variable &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vision_core_1_1_async_1_1_async_frame_server_wrap.html#a2f76fa0062ff4d405b8296b356ec6833">getNewFrameCondVar</a> ()</td></tr>
<tr class="memdesc:a2f76fa0062ff4d405b8296b356ec6833"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the conditional variable used to notify other threads that a new frame was captured. <br /></td></tr>
<tr class="separator:a2f76fa0062ff4d405b8296b356ec6833"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c5641dc8b269eee5a0bf7d2e47ed9ed"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6c5641dc8b269eee5a0bf7d2e47ed9ed"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vision_core_1_1_async_1_1_async_frame_server_wrap.html#a6c5641dc8b269eee5a0bf7d2e47ed9ed">setCallback</a> (const std::function&lt; void(std::shared_ptr&lt; <a class="el" href="struct_vision_core_1_1_data_structures_1_1_frame.html">Frame</a>&lt; TImg &gt;&gt;)&gt; &amp;callback)</td></tr>
<tr class="memdesc:a6c5641dc8b269eee5a0bf7d2e47ed9ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets a callback function that is executed after every frame capture. <br /></td></tr>
<tr class="separator:a6c5641dc8b269eee5a0bf7d2e47ed9ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae765905307a24758f1ed460be1fd80b2"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae765905307a24758f1ed460be1fd80b2"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vision_core_1_1_async_1_1_async_frame_server_wrap.html#ae765905307a24758f1ed460be1fd80b2">addCallback</a> (const std::function&lt; void(std::shared_ptr&lt; <a class="el" href="struct_vision_core_1_1_data_structures_1_1_frame.html">Frame</a>&lt; TImg &gt;&gt;)&gt; &amp;callback)</td></tr>
<tr class="memdesc:ae765905307a24758f1ed460be1fd80b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a callback function that is executed after each capture. <br /></td></tr>
<tr class="separator:ae765905307a24758f1ed460be1fd80b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab212e28ba94abfba3af5cea45609a502"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab212e28ba94abfba3af5cea45609a502"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vision_core_1_1_async_1_1_async_frame_server_wrap.html#ab212e28ba94abfba3af5cea45609a502">setFramesToCapture</a> (const int quantity)</td></tr>
<tr class="memdesc:ab212e28ba94abfba3af5cea45609a502"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets how many frames will be captured. The frame server will pause(stop) after capturing these frames. Negative values means no restriction. <br /></td></tr>
<tr class="separator:ab212e28ba94abfba3af5cea45609a502"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a064142ef99cfb7aaad5ba4eb51056ab7"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a064142ef99cfb7aaad5ba4eb51056ab7"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vision_core_1_1_async_1_1_async_frame_server_wrap.html#a064142ef99cfb7aaad5ba4eb51056ab7">setFrameServer</a> (<a class="el" href="class_vision_core_1_1_interfaces_1_1_frame_server.html">FrameServer</a>&lt; TImg &gt; *fs)</td></tr>
<tr class="memdesc:a064142ef99cfb7aaad5ba4eb51056ab7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets a new frame server. The old is not deleted. <br /></td></tr>
<tr class="separator:a064142ef99cfb7aaad5ba4eb51056ab7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa4d334f33f49c61c9b3e306b60f4cc74"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa4d334f33f49c61c9b3e306b60f4cc74"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vision_core_1_1_async_1_1_async_frame_server_wrap.html#aa4d334f33f49c61c9b3e306b60f4cc74">getFramesPerSecond</a> () const </td></tr>
<tr class="memdesc:aa4d334f33f49c61c9b3e306b60f4cc74"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the frames captured per second. <br /></td></tr>
<tr class="separator:aa4d334f33f49c61c9b3e306b60f4cc74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d21ea1dd98cb2913cef820c71ab1e54"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a0d21ea1dd98cb2913cef820c71ab1e54"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vision_core_1_1_async_1_1_async_frame_server_wrap.html#a0d21ea1dd98cb2913cef820c71ab1e54">setFramesPerSecond</a> (double framesPerSecond)</td></tr>
<tr class="memdesc:a0d21ea1dd98cb2913cef820c71ab1e54"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the frames captured per second. If it is less or equal to 0 the capture will be as fast as possible (may be problematic for other threads processing the frames). <br /></td></tr>
<tr class="separator:a0d21ea1dd98cb2913cef820c71ab1e54"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;class TImg&gt;<br />
class VisionCore::Async::AsyncFrameServerWrap&lt; TImg &gt;</h3>

<p>Allows the execution of a frame server asynchronously in an individual thread. </p>
<p>This class is a wrap for a FrameServer object that captures frames in a individual thread and notifies other trheads the frame capture (using std conditional variables). This way, other threads can access the captured frames by calling the <a class="el" href="class_vision_core_1_1_async_1_1_async_frame_server_wrap.html#a954ec16b07c6dffd3e6fa1c19adde9a7" title="Returns the most recent captured frame. ">getCurrentFrame()</a> method.</p>
<p>It is also possible to set a callback function (<a class="el" href="class_vision_core_1_1_async_1_1_async_frame_server_wrap.html#a6c5641dc8b269eee5a0bf7d2e47ed9ed" title="Sets a callback function that is executed after every frame capture. ">setCallback()</a> method) that is executed after every frame capture.s.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">TImg</td><td>Image type. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_vision_async_8h_source.html#l00064">64</a> of file <a class="el" href="_vision_async_8h_source.html">VisionAsync.h</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a60de64d75454385b23995437f1d72669"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void start </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Start frame capturing in a individual thread. </p>
<p>The frames are captured from the internal FrameServer object continuously. While capturing is active, other threads are notified of a capture using the conditional variable. </p>

<p>Definition at line <a class="el" href="_vision_async_8h_source.html#l00077">77</a> of file <a class="el" href="_vision_async_8h_source.html">VisionAsync.h</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>D:/FURG/Software/CvWorksRelease1/Core/Vision/<a class="el" href="_vision_async_8h_source.html">VisionAsync.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespace_vision_core.html">VisionCore</a></li><li class="navelem"><a class="el" href="namespace_vision_core_1_1_async.html">Async</a></li><li class="navelem"><a class="el" href="class_vision_core_1_1_async_1_1_async_frame_server_wrap.html">AsyncFrameServerWrap</a></li>
    <li class="footer">Generated on Wed Nov 18 2015 11:12:11 for CvWorks by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.10 </li>
  </ul>
</div>
</body>
</html>
