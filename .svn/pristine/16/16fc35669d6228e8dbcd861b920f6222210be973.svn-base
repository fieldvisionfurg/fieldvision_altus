<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>CvWorks: D:/FURG/Software/CvWorksRelease1/Tests/VisionTests/main.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="C3.jpg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">CvWorks
   &#160;<span id="projectnumber">0.4</span>
   </div>
   <div id="projectbrief">Computer Vision Framework</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('main_8cpp_source.html','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">main.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &quot;VisionImplementationCv.h&quot;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &quot;FireDetectorCv.h&quot;</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespace_vision_core.html">VisionCore</a>;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespace_viscv.html">Viscv</a>;</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">// Example showing the execution of a detector.</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">/* This example runs a ColorBlobDetector, which segments blobs in the image within a</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">given color range. The blobs are represented by their contour as a vector of points.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keywordtype">void</span> testColorBlobDetector(){</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="comment">// Defines a contour</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keyword">typedef</span> std::vector&lt;cv::Point&gt; Contours;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="comment">// Create a frame server. By default it will try to open the first webcam.</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <a class="code" href="class_viscv_1_1_frame_server_cv.html">FrameServerCv</a> frameServer;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="comment">// Create a color blob detector.</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <a class="code" href="class_viscv_1_1_color_blob_detector_h_f.html">ColorBlobDetectorHF</a> detector;</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="comment">// Creates a window for simple visualisation of results.</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <a class="code" href="class_viscv_1_1_cv_image_g_u_i.html">CvImageGUI</a> gui;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="comment">// Loop over frames</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">while</span>(frameServer.<a class="code" href="class_viscv_1_1_frame_server_cv.html#a634d758e1811c32295f5665e4f8a0178">hasNext</a>()){</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="comment">// Capture frame.</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html">Frame&lt;cv::Mat&gt;</a> frame = frameServer.<a class="code" href="class_viscv_1_1_frame_server_cv.html#a9ad5d34c4a7364130b2da00adc8f8638">captureFrame</a>();</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="comment">// Perform detection</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        std::vector&lt;Contours&gt; blobs = detector.<a class="code" href="class_viscv_1_1_color_blob_detector_h_f.html#a76311b08b5cb9df65524e070e9c15048">detect</a>(frame.<a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html#a8531d354b20874961d98c796e3973b4d">getImg</a>());</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="comment">// Visualization of results.</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        gui.<a class="code" href="class_viscv_1_1_cv_image_g_u_i.html#a4ae2d7fd59643d69dfe83dff37582501">setImg</a>(frame.<a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html#a8531d354b20874961d98c796e3973b4d">getImg</a>());</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        gui.draw(blobs);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        gui.show();</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    }</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">// Example showing how to create a multi-tracker based on a detector.</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">/* This example first creates a face detector based on ObjectDetectorCCCv method (which is a</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"> * wrap for OpenCv haar cascade detector).</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"> * Based on this detector, a tracker for multiple faces is created. The DetectorBasedMultiTracker class</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment"> * can keep a track of faces along a video. This class can be used with any generic detector.</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"> * \see DetectorBasedMultiTracker</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="keywordtype">void</span> testDetectorBasedTracker(){</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">typedef</span> cv::Mat TImg;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">typedef</span> cv::Rect TObj;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="comment">// Create a frame server. By default it will try to open the first webcam.</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="class_vision_core_1_1_interfaces_1_1_frame_server.html">FrameServer&lt;TImg&gt;</a> &amp;frameServer = <a class="code" href="class_viscv_1_1_frame_server_cv.html">FrameServerCv</a>();</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="comment">// Create a face detector</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    std::string cascadeFile = <span class="stringliteral">&quot;..\\..\\ExternalLibraries\\OpenCV2.4.9\\data\\haarcascades\\haarcascade_frontalface_default.xml&quot;</span>;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="class_vision_core_1_1_interfaces_1_1_detector.html">Detector&lt;TImg,TObj&gt;</a> &amp;detector = <a class="code" href="class_viscv_1_1_object_detector_c_c_cv.html">ObjectDetectorCCCv</a>(cascadeFile);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="comment">// Create a multiple face tracker using the generic detector based multi tracker.</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <a class="code" href="class_vision_core_1_1_abstractions_1_1_detector_based_multi_tracker.html">DetectorBasedMultiTracker&lt;TImg,TObj&gt;</a> tracker(&amp;detector);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="comment">// Start processing frames</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <a class="code" href="class_viscv_1_1_cv_image_g_u_i.html">CvImageGUI</a> gui;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">while</span>(frameServer.<a class="code" href="class_vision_core_1_1_interfaces_1_1_frame_server.html#ac7d6b5c759a38e9e376f500f7155a679">hasNext</a>()){</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="comment">// Capture frame</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html">Frame&lt;TImg&gt;</a> frame = frameServer.<a class="code" href="class_vision_core_1_1_interfaces_1_1_frame_server.html#a8d2ffbcea7c28182a48f32e86f830e12">captureFrame</a>();</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="comment">// Update tracker</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        tracker.update(frame);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="keyword">auto</span> objects=tracker.getLastTrack();</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="comment">// Draw results</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        gui.<a class="code" href="class_viscv_1_1_cv_image_g_u_i.html#a4ae2d7fd59643d69dfe83dff37582501">setImg</a>(frame.<a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html#a8531d354b20874961d98c796e3973b4d">getImg</a>());</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        gui.draw(objects);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        gui.show();</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    }</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;}</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">// Example showing a multi-tracker based on abstract class AbstractAutoTracker.</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">/* This example runs a multi-face tracker implemented in class MultiObjectTrackerCCCv.</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment"> * This class is derived from AbstractAutoTracker, which provides a base implementation for automaticly</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment"> * detecting new objects and managing a pool of individual trackers.</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment"> * \see AbstractAutoTracker</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="keywordtype">void</span> testMultiTracker(){</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keyword">typedef</span> cv::Mat TImg;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keyword">typedef</span> cv::Rect TObj;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;     <span class="comment">// Create a frame server. By default it will try to open the first webcam.</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <a class="code" href="class_vision_core_1_1_interfaces_1_1_frame_server.html">FrameServer&lt;TImg&gt;</a> &amp;frameServer = <a class="code" href="class_viscv_1_1_frame_server_cv.html">FrameServerCv</a>();</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="comment">// Create a multiple face tracker.</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    std::string cascadeFile = <span class="stringliteral">&quot;..\\..\\ExternalLibraries\\OpenCV2.4.9\\data\\haarcascades\\haarcascade_frontalface_default.xml&quot;</span>;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <a class="code" href="class_vision_core_1_1_abstractions_1_1_abstract_auto_tracker.html">AbstractAutoTracker&lt;TImg,TObj&gt;</a> &amp;track = <a class="code" href="class_viscv_1_1_multi_object_tracker_c_c_cv.html">MultiObjectTrackerCCCv</a>(cascadeFile);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="comment">// Start processing frames</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <a class="code" href="class_viscv_1_1_cv_image_g_u_i.html">CvImageGUI</a> gui;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">while</span>(frameServer.<a class="code" href="class_vision_core_1_1_interfaces_1_1_frame_server.html#ac7d6b5c759a38e9e376f500f7155a679">hasNext</a>()){</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="comment">// Capture frame.</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html">Frame&lt;TImg&gt;</a> frame = frameServer.<a class="code" href="class_vision_core_1_1_interfaces_1_1_frame_server.html#a8d2ffbcea7c28182a48f32e86f830e12">captureFrame</a>();</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="comment">// Update tracker</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        track.<a class="code" href="class_vision_core_1_1_abstractions_1_1_abstract_auto_tracker.html#af1a54610c9af7fb54d00e4be2e75609e">update</a>(frame);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keyword">auto</span> objects=track.<a class="code" href="class_vision_core_1_1_abstractions_1_1_abstract_auto_tracker.html#afdfc24d8a5f14f873caf5e1d3ff55546">getLastTrack</a>();</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="comment">// Draw results</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        gui.<a class="code" href="class_viscv_1_1_cv_image_g_u_i.html#a4ae2d7fd59643d69dfe83dff37582501">setImg</a>(frame.<a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html#a8531d354b20874961d98c796e3973b4d">getImg</a>());</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> std::pair&lt;long,TObj&gt;&amp; t : objects)</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            gui.draw(t.second);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        gui.show();</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    }</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;}</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="keywordtype">void</span> testCircleDetector(){</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <a class="code" href="class_vision_core_1_1_interfaces_1_1_frame_server.html">FrameServer&lt;cv::Mat&gt;</a> &amp;frameServer = <a class="code" href="class_viscv_1_1_frame_server_cv.html">FrameServerCv</a>();</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <a class="code" href="class_viscv_1_1_circle_detector_h_t_c_f.html">CircleDetectorHTCF</a> circleDetector;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <a class="code" href="class_viscv_1_1_cv_image_g_u_i.html">CvImageGUI</a> gui;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordflow">while</span>(frameServer.<a class="code" href="class_vision_core_1_1_interfaces_1_1_frame_server.html#ac7d6b5c759a38e9e376f500f7155a679">hasNext</a>()){</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html">Frame&lt;cv::Mat&gt;</a> frame = frameServer.<a class="code" href="class_vision_core_1_1_interfaces_1_1_frame_server.html#a8d2ffbcea7c28182a48f32e86f830e12">captureFrame</a>();</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        std::vector&lt;Circle&lt;&gt;&gt; circles = circleDetector.<a class="code" href="class_viscv_1_1_circle_detector_h_t_c_f.html#ad8f008988f0c246f86a192f8c17c3a88">detect</a>(frame.<a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html#a8531d354b20874961d98c796e3973b4d">getImg</a>());</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        gui.<a class="code" href="class_viscv_1_1_cv_image_g_u_i.html#a4ae2d7fd59643d69dfe83dff37582501">setImg</a>(frame.<a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html#a8531d354b20874961d98c796e3973b4d">getImg</a>());</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        gui.draw(circles);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        gui.show();</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;}</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">// Example showing the execution of a frame server and a detector in separate threads.</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">/* This example shows how to use the asynchronous execution provided by CvWorks.</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment"> * First a frame server is created and wrapped in a AsyncFrameServerWrap object, which runs it in a</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment"> * individual thread.</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment"> * Then a face detector is created and wrapped in a AsyncDetectorWrap.</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment"> * \see AsyncFrameServerWrap AsyncDetectorWrap</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="keywordtype">void</span> asyncTest(){</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <a class="code" href="class_viscv_1_1_cv_image_g_u_i.html">CvImageGUI</a> gui;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="comment">// Create an AsyncFrameServer from webcam</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <a class="code" href="class_vision_core_1_1_interfaces_1_1_frame_server.html">FrameServer&lt;cv::Mat&gt;</a> &amp;frameServer = <a class="code" href="class_viscv_1_1_frame_server_cv.html">FrameServerCv</a>();</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <a class="code" href="class_vision_core_1_1_async_1_1_async_frame_server_wrap.html">AsyncFrameServerWrap&lt;cv::Mat&gt;</a> asyncFS(&amp;frameServer);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="comment">// Set callback when frame is capture. Set the frame for visualization.</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    asyncFS.setCallback([&amp;](std::shared_ptr&lt;<a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html">Frame&lt;cv::Mat&gt;</a>&gt; framePtr){</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        gui.<a class="code" href="class_viscv_1_1_cv_image_g_u_i.html#a4ae2d7fd59643d69dfe83dff37582501">setImg</a>(framePtr-&gt;getImg());</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    });</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="comment">// Create an AsyncDetector</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <a class="code" href="class_viscv_1_1_object_detector_c_c_cv.html">ObjectDetectorCCCv</a> detector(<span class="stringliteral">&quot;..\\..\\ExternalLibraries\\OpenCV2.4.9\\data\\haarcascades\\haarcascade_frontalface_default.xml&quot;</span>);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <a class="code" href="class_vision_core_1_1_async_1_1_async_detector_wrap.html">AsyncDetectorWrap&lt;cv::Mat,cv::Rect&gt;</a> asyncDet(&amp;asyncFS,&amp;detector);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="comment">// Set the callback function that is called when objects are detected</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    asyncDet.setCallback([&amp;](std::vector&lt;cv::Rect&gt; det){</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        std::cout&lt;&lt;<span class="stringliteral">&quot;Face detected!!!\n\n&quot;</span>;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        gui.draw(det);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="comment">//gui.show(); // doesn&#39;t work (probably because gui was created on a different thread)</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        cv::imshow(<span class="stringliteral">&quot;Async Detection&quot;</span>,gui.<a class="code" href="class_viscv_1_1_cv_image_g_u_i.html#a128346d089624c27ffddb80f0526dc24">getImg</a>());</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        cv::waitKey(1);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    });</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="comment">// Start frame server and detector</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    asyncDet.start();</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    asyncFS.start();</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="comment">// Wait for the AsyncFrameServer thread to finish</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    asyncFS.getThreadPtr()-&gt;join();</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    std::cout&lt;&lt;<span class="stringliteral">&quot;Finished.&quot;</span>;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;}</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">/* Callback function to get a rectangle clicked in a image.*/</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;cv::Point firstPoint;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;cv::Point secondPoint;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="keywordtype">int</span> clickCount = 0;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="keywordtype">bool</span> rectReady=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="keywordtype">void</span> onMouse( <span class="keywordtype">int</span> event, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keywordtype">int</span>, <span class="keywordtype">void</span>* )</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;{</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keywordflow">if</span>( event != cv::EVENT_LBUTTONDOWN )</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    clickCount++;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordflow">if</span>(clickCount==1){</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        firstPoint = cv::Point(x,y);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        rectReady=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    }</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">if</span>(clickCount==2){</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        secondPoint = cv::Point(x,y);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        clickCount=0;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        rectReady=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    }</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;}</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">// Example showing the use of feature matching object detector.</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">/* This example shows how to use the ObjectDetectorFMCv class.</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment"> * The user has to click on the top left corner and botton right corner</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment"> * to define a rectangle containing the object to be detected.</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment"> * This object is passed to the detector by calling setTargetImage().</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment"> * \see ObjectDetectorFMCv</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="keywordtype">void</span> testObjectDetectorFMCv(){</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <a class="code" href="class_vision_core_1_1_interfaces_1_1_frame_server.html">FrameServer&lt;cv::Mat&gt;</a> &amp;frameServer = <a class="code" href="class_viscv_1_1_frame_server_cv.html">FrameServerCv</a>();</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <a class="code" href="class_viscv_1_1_object_detector_f_m_cv.html">ObjectDetectorFMCv</a> detector;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <a class="code" href="class_viscv_1_1_cv_image_g_u_i.html">CvImageGUI</a> gui;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="comment">// defines callback for image click</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    cv::setMouseCallback(gui.<a class="code" href="class_viscv_1_1_cv_image_g_u_i.html#afb48ea0df1b0f3d228839536031af917">getWindowName</a>(),onMouse);</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keywordflow">while</span>(frameServer.<a class="code" href="class_vision_core_1_1_interfaces_1_1_frame_server.html#ac7d6b5c759a38e9e376f500f7155a679">hasNext</a>()){</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html">Frame&lt;cv::Mat&gt;</a> frame = frameServer.<a class="code" href="class_vision_core_1_1_interfaces_1_1_frame_server.html#a8d2ffbcea7c28182a48f32e86f830e12">captureFrame</a>();</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <span class="comment">// when two clicks, defines object to detect</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <span class="keywordflow">if</span>(rectReady){</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            cv::Mat img = frame.<a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html#a8531d354b20874961d98c796e3973b4d">getImg</a>();</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            cv::Rect ROI(firstPoint,secondPoint);</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            detector.setTargetImage(img(ROI));</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            rectReady=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="comment">//detect</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        std::vector&lt;cv::Rect&gt; obj = detector.<a class="code" href="class_viscv_1_1_object_detector_f_m_cv.html#a1d0c071b6e7a19b192c86ca0e47fd642">detect</a>(frame.<a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html#a8531d354b20874961d98c796e3973b4d">getImg</a>());</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="comment">//shows result</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        gui.<a class="code" href="class_viscv_1_1_cv_image_g_u_i.html#a4ae2d7fd59643d69dfe83dff37582501">setImg</a>(frame.<a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html#a8531d354b20874961d98c796e3973b4d">getImg</a>());</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        gui.draw(obj);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        gui.show();</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    }</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;}</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment">// Example showing the evaluation of a detector.</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">/* This example shows the evaluation of a face detector.</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment"> * The detector is an ObjectDetectorCCCv object (which is a simple wrap for OpenCv</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment"> * haar cascade detector).</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment"> * The class DatasetFDDB implements interface DetectionDataset, providing generic access to the FDDB face</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment"> * dataset.</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment"> * Then the generic DetectorEvaluator class is used to evaluate the detector.</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment"> * \see DetectorEvaluator DetectionDataset</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="keywordtype">void</span> testFDDBDataset(){</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="comment">// Creates dataset</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;   <a class="code" href="class_viscv_1_1_dataset_f_d_d_b.html">DatasetFDDB</a> db(<span class="stringliteral">&quot;C:/Datasets/FDDB/&quot;</span>,<span class="stringliteral">&quot;C:/Datasets/FDDB/FDDB-fold-01-ellipseList.txt&quot;</span>);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;   <span class="comment">// Creates detector</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;   <a class="code" href="class_viscv_1_1_object_detector_c_c_cv.html">ObjectDetectorCCCv</a> det(<span class="stringliteral">&quot;../../ExternalLibraries/OpenCV2.4.9/data/haarcascades/haarcascade_frontalface_default.xml&quot;</span>);</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="comment">// Defines the similarity between two rectangles as the proportion of intersection between them.</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    std::function&lt;double(const cv::Rect &amp;r1,const cv::Rect &amp;r2)&gt; simFc = [](<span class="keyword">const</span> cv::Rect &amp;r1,<span class="keyword">const</span> cv::Rect &amp;r2){</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <span class="keywordtype">double</span> areaR1=r1.area();</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <span class="keywordtype">double</span> areaR2=r2.area();</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="keywordtype">double</span> areaIntrsect=(r1 &amp; r2).area(); <span class="comment">//intersection area</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <span class="keywordtype">double</span> similarity = areaIntrsect / (areaR1+areaR2-areaIntrsect);</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <span class="keywordflow">return</span> similarity;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    };</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="comment">// Create the evaluator, passing the dataset, detector and similarity function. A report is printed at the end.</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <a class="code" href="class_vision_core_1_1_evaluation_1_1_detector_evaluator.html">DetectorEvaluator&lt;cv::Mat,cv::Rect&gt;</a> evaluator;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    evaluator.<a class="code" href="class_vision_core_1_1_evaluation_1_1_detector_evaluator.html#affd22efb035f7daffbc8ce1ae4b1e85f">evaluateDetector</a>(det,db,simFc);</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="comment">// The evaluation is done.</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="comment">// Just as a visualization example, iterates again over the dataset showing the dataset</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="comment">// objects and the result of detections.</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <a class="code" href="class_viscv_1_1_cv_image_g_u_i.html">CvImageGUI</a> gui;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    db.forEachSample([&amp;](cv::Mat&amp; img,std::vector&lt;cv::Rect&gt;&amp; objects,<span class="keyword">const</span> std::string&amp; sampleID){</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        gui.<a class="code" href="class_viscv_1_1_cv_image_g_u_i.html#a4ae2d7fd59643d69dfe83dff37582501">setImg</a>(img);</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        gui.draw(det.detect(img));</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        gui.draw(objects);</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        gui.show();</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    });</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;}</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment">// Example showing the generic tracker logger usage.</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment">/* This example shows the usage of TrackerLogger class.</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment"> * First a multiple face tracker is created based on haar cascade classifier.</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment"> * Then it is wrapped on a TrackerLogger, which provides transparent logging functionalities.</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment"> * Note that the tracking with the logger object is performed as any other tracker.</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment"> * After 100 frames the result is saved in a CSV file.</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment"> * \see TrackerLogger</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="keywordtype">void</span> testDetectionLogger()</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;{</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="comment">// Create frame server from webcam</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <a class="code" href="class_viscv_1_1_frame_server_cv.html">FrameServerCv</a> frameServer;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="comment">// Create multiple face tracking</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    std::string cascadeFile = <span class="stringliteral">&quot;..\\..\\ExternalLibraries\\OpenCV2.4.9\\data\\haarcascades\\haarcascade_frontalface_default.xml&quot;</span>;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <a class="code" href="class_viscv_1_1_multi_object_tracker_c_c_cv.html">MultiObjectTrackerCCCv</a> faceTracker(cascadeFile);</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="comment">// Wrap tracker in a TrackerLogger.</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <a class="code" href="class_vision_core_1_1_abstractions_1_1_tracker_logger.html">TrackerLogger&lt;cv::Mat,MultiObjectTrackerCCCv::ObjType&gt;</a> tracker(&amp;faceTracker);</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="comment">// Start capturing frames</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <a class="code" href="class_viscv_1_1_cv_image_g_u_i.html">CvImageGUI</a> gui;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keywordflow">while</span>(frameServer.<a class="code" href="class_viscv_1_1_frame_server_cv.html#a634d758e1811c32295f5665e4f8a0178">hasNext</a>()){</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        <a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html">Frame&lt;cv::Mat&gt;</a> frame = frameServer.<a class="code" href="class_viscv_1_1_frame_server_cv.html#a9ad5d34c4a7364130b2da00adc8f8638">captureFrame</a>();</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="comment">// Update tracker</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        tracker.update(frame);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        <span class="comment">// Visualization</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        gui.<a class="code" href="class_viscv_1_1_cv_image_g_u_i.html#a4ae2d7fd59643d69dfe83dff37582501">setImg</a>(frame.<a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html#a8531d354b20874961d98c796e3973b4d">getImg</a>());</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> std::pair&lt;long,cv::Rect&gt;&amp; t : tracker.getLastTrack())</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            gui.draw(t.second);</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        gui.show();</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        <span class="comment">// Stop after 100 frames</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        <span class="keywordflow">if</span>(frame.<a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html#a14dc2ac21bd59eb0bce43d5f839b8de0">getNumber</a>()&gt;100)</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    }</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="comment">// Write log to a CSV file</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    tracker.writeToFileAsCsv(<span class="stringliteral">&quot;test.txt&quot;</span>);</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;}</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment">// Simple tag detector example.</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="keywordtype">void</span> testTagDetection(){</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <a class="code" href="class_vision_core_1_1_interfaces_1_1_frame_server.html">FrameServer&lt;cv::Mat&gt;</a> &amp;frameServer = <a class="code" href="class_viscv_1_1_frame_server_cv.html">FrameServerCv</a>();</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <a class="code" href="class_viscv_1_1_a_r_tag_detector_b_l_p.html">ARTagDetectorBLP</a> tagDetector;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <a class="code" href="class_viscv_1_1_cv_image_g_u_i.html">CvImageGUI</a> gui;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="keywordflow">while</span>(frameServer.<a class="code" href="class_vision_core_1_1_interfaces_1_1_frame_server.html#ac7d6b5c759a38e9e376f500f7155a679">hasNext</a>()){</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        <a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html">Frame&lt;cv::Mat&gt;</a> frame = frameServer.<a class="code" href="class_vision_core_1_1_interfaces_1_1_frame_server.html#a8d2ffbcea7c28182a48f32e86f830e12">captureFrame</a>();</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        std::vector&lt;ARTag&gt; tags = tagDetector.<a class="code" href="class_viscv_1_1_a_r_tag_detector_b_l_p.html#a0065a0a0e3dbed236849bf406e6cde66">detect</a>(frame.<a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html#a8531d354b20874961d98c796e3973b4d">getImg</a>());</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        gui.<a class="code" href="class_viscv_1_1_cv_image_g_u_i.html#a4ae2d7fd59643d69dfe83dff37582501">setImg</a>(frame.<a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html#a8531d354b20874961d98c796e3973b4d">getImg</a>());</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        gui.draw(tags);</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        gui.show();</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    }</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;}</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="keywordtype">void</span> videoChenebertXProposed(){</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    std::function&lt;double(std::vector&lt;cv::Point&gt; &amp;dt, cv::Rect &amp;gt)&gt; simFc = [](std::vector&lt;cv::Point&gt; &amp;dt, cv::Rect &amp;gt){</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        cv::Rect dtr = cv::boundingRect(dt);</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        <span class="keywordtype">double</span> area_dtr= dtr.area();</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        <span class="keywordtype">double</span> areaIntrsect=(dtr &amp; gt).area();</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        <span class="keywordtype">double</span> similarity = areaIntrsect/area_dtr;</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <span class="keywordflow">return</span> similarity;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    };</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <a class="code" href="class_dataset_fire.html">DatasetFire</a> db(<span class="stringliteral">&quot;../../Files/FireDataset/&quot;</span>);</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="comment">//Cria evaluator</span></div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <a class="code" href="class_vision_core_1_1_evaluation_1_1_tracker_evaluator.html">TrackerEvaluator&lt;cv::Mat, std::vector&lt;cv::Point&gt;</a>, cv::Rect&gt; evaluator;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    evaluator.<a class="code" href="class_vision_core_1_1_evaluation_1_1_tracker_evaluator.html#a0c973d5fd9480a0cca418ac96f79cf39">setSimilarityFunction</a>(simFc);</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <a class="code" href="class_fire_tracker_s_a.html">FireTrackerSA</a> tracker(<span class="stringliteral">&quot;../../Files/FireDataset/rf_classifiers/20150218_region_classification_model&quot;</span>,</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                          <span class="stringliteral">&quot;../../Files/FireDataset/rf_classifiers/color_classification_model&quot;</span>);</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <a class="code" href="class_viscv_1_1_cv_image_g_u_i.html">CvImageGUI</a> gui;</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="keywordflow">for</span> (std::string s: db.getSamplesID()){</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        std::cout &lt;&lt; s&lt;&lt; std::endl;</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        <a class="code" href="class_vision_core_1_1_interfaces_1_1_frame_server.html">FrameServer&lt;cv::Mat&gt;</a> *fs = db.getFrameServer(s);</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        std::vector&lt;std::vector&lt;cv::Rect&gt;&gt; objects = db.getObjects(s);</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <span class="keywordflow">while</span>(fs-&gt;<a class="code" href="class_vision_core_1_1_interfaces_1_1_frame_server.html#ac7d6b5c759a38e9e376f500f7155a679">hasNext</a>()){</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            <a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html">Frame&lt;cv::Mat&gt;</a> f = fs-&gt;<a class="code" href="class_vision_core_1_1_interfaces_1_1_frame_server.html#a8d2ffbcea7c28182a48f32e86f830e12">captureFrame</a>();</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;            gui.<a class="code" href="class_viscv_1_1_cv_image_g_u_i.html#a4ae2d7fd59643d69dfe83dff37582501">setImg</a>(f.<a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html#a8531d354b20874961d98c796e3973b4d">getImg</a>());</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            tracker.update(f);</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;            gui.draw(objects.at(f.<a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html#a14dc2ac21bd59eb0bce43d5f839b8de0">getNumber</a>()));</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            gui.draw(tracker.getLastTrack());</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;            gui.show();</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;            cv::waitKey(1);</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        }</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    }</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;}</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;{</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <span class="comment">//testColorBlobDetector();</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="comment">//testCircleDetector();</span></div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    testDetectorBasedTracker();</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <span class="comment">//testMultiTracker();</span></div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="comment">//testDetectionLogger();</span></div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <span class="comment">//asyncTest();</span></div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="comment">//testFDDBDataset()</span></div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    <span class="comment">//testTagDetection();</span></div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="comment">//testObjectDetectorFMCv();</span></div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <span class="comment">//videoChenebertXProposed();</span></div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    system (<span class="stringliteral">&quot;PAUSE&quot;</span>);</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;}</div>
<div class="ttc" id="class_viscv_1_1_frame_server_cv_html_a9ad5d34c4a7364130b2da00adc8f8638"><div class="ttname"><a href="class_viscv_1_1_frame_server_cv.html#a9ad5d34c4a7364130b2da00adc8f8638">Viscv::FrameServerCv::captureFrame</a></div><div class="ttdeci">virtual const VisionCore::Frame&lt; cv::Mat &gt; captureFrame()</div><div class="ttdoc">Captures the next frame available. </div><div class="ttdef"><b>Definition:</b> <a href="_frame_server_cv_8cpp_source.html#l00088">FrameServerCv.cpp:88</a></div></div>
<div class="ttc" id="class_viscv_1_1_object_detector_c_c_cv_html"><div class="ttname"><a href="class_viscv_1_1_object_detector_c_c_cv.html">Viscv::ObjectDetectorCCCv</a></div><div class="ttdoc">A wrapper to OpenCv haar detector. </div><div class="ttdef"><b>Definition:</b> <a href="_object_detector_c_c_cv_8h_source.html#l00039">ObjectDetectorCCCv.h:39</a></div></div>
<div class="ttc" id="class_vision_core_1_1_interfaces_1_1_frame_server_html_a8d2ffbcea7c28182a48f32e86f830e12"><div class="ttname"><a href="class_vision_core_1_1_interfaces_1_1_frame_server.html#a8d2ffbcea7c28182a48f32e86f830e12">VisionCore::Interfaces::FrameServer::captureFrame</a></div><div class="ttdeci">virtual const Frame&lt; TImg &gt; captureFrame()=0</div><div class="ttdoc">Captures and returns a frame from the source. </div></div>
<div class="ttc" id="class_vision_core_1_1_interfaces_1_1_frame_server_html_ac7d6b5c759a38e9e376f500f7155a679"><div class="ttname"><a href="class_vision_core_1_1_interfaces_1_1_frame_server.html#ac7d6b5c759a38e9e376f500f7155a679">VisionCore::Interfaces::FrameServer::hasNext</a></div><div class="ttdeci">virtual bool hasNext()=0</div><div class="ttdoc">Returns true if there exist at least one frame available to be captured. </div></div>
<div class="ttc" id="class_viscv_1_1_circle_detector_h_t_c_f_html_ad8f008988f0c246f86a192f8c17c3a88"><div class="ttname"><a href="class_viscv_1_1_circle_detector_h_t_c_f.html#ad8f008988f0c246f86a192f8c17c3a88">Viscv::CircleDetectorHTCF::detect</a></div><div class="ttdeci">std::vector&lt; Circle&lt;&gt; &gt; detect(const cv::Mat &amp;img) const </div><div class="ttdoc">Detects objects in the image and returns a vector with the detected objects. </div><div class="ttdef"><b>Definition:</b> <a href="_circle_detector_h_t_c_f_8cpp_source.html#l00076">CircleDetectorHTCF.cpp:76</a></div></div>
<div class="ttc" id="class_viscv_1_1_cv_image_g_u_i_html_afb48ea0df1b0f3d228839536031af917"><div class="ttname"><a href="class_viscv_1_1_cv_image_g_u_i.html#afb48ea0df1b0f3d228839536031af917">Viscv::CvImageGUI::getWindowName</a></div><div class="ttdeci">const std::string getWindowName() const </div><div class="ttdoc">Returns the value of member &#39;m_windowName&#39;. </div><div class="ttdef"><b>Definition:</b> <a href="_cv_image_g_u_i_8cpp_source.html#l00173">CvImageGUI.cpp:173</a></div></div>
<div class="ttc" id="class_vision_core_1_1_evaluation_1_1_tracker_evaluator_html_a0c973d5fd9480a0cca418ac96f79cf39"><div class="ttname"><a href="class_vision_core_1_1_evaluation_1_1_tracker_evaluator.html#a0c973d5fd9480a0cca418ac96f79cf39">VisionCore::Evaluation::TrackerEvaluator::setSimilarityFunction</a></div><div class="ttdeci">void setSimilarityFunction(std::function&lt; double(TObj1 &amp;, TObj2 &amp;)&gt; similarityFcn)</div><div class="ttdoc">Sets the similarity function between tracked object and ground-truth. </div><div class="ttdef"><b>Definition:</b> <a href="_vision_evaluation_8h_source.html#l01104">VisionEvaluation.h:1104</a></div></div>
<div class="ttc" id="struct_vision_core_1_1_data_structures_1_1_frame_html_a8531d354b20874961d98c796e3973b4d"><div class="ttname"><a href="struct_vision_core_1_1_data_structures_1_1_frame.html#a8531d354b20874961d98c796e3973b4d">VisionCore::DataStructures::Frame::getImg</a></div><div class="ttdeci">const TImg &amp; getImg() const </div><div class="ttdoc">Returns a reference to the frame image. </div><div class="ttdef"><b>Definition:</b> <a href="_vision_data_structures_8h_source.html#l00084">VisionDataStructures.h:84</a></div></div>
<div class="ttc" id="class_vision_core_1_1_abstractions_1_1_tracker_logger_html"><div class="ttname"><a href="class_vision_core_1_1_abstractions_1_1_tracker_logger.html">VisionCore::Abstractions::TrackerLogger</a></div><div class="ttdoc">Provides log functionalities for a Tracker. Stores results, processing times and statistics. </div><div class="ttdef"><b>Definition:</b> <a href="_vision_abstractions_8h_source.html#l00651">VisionAbstractions.h:651</a></div></div>
<div class="ttc" id="class_vision_core_1_1_interfaces_1_1_detector_html"><div class="ttname"><a href="class_vision_core_1_1_interfaces_1_1_detector.html">VisionCore::Interfaces::Detector</a></div><div class="ttdoc">Interface defining a generic object detector (e.g. faces, car, people). </div><div class="ttdef"><b>Definition:</b> <a href="_vision_interfaces_8h_source.html#l00125">VisionInterfaces.h:125</a></div></div>
<div class="ttc" id="class_vision_core_1_1_async_1_1_async_frame_server_wrap_html"><div class="ttname"><a href="class_vision_core_1_1_async_1_1_async_frame_server_wrap.html">VisionCore::Async::AsyncFrameServerWrap&lt; cv::Mat &gt;</a></div></div>
<div class="ttc" id="class_viscv_1_1_color_blob_detector_h_f_html"><div class="ttname"><a href="class_viscv_1_1_color_blob_detector_h_f.html">Viscv::ColorBlobDetectorHF</a></div><div class="ttdoc">Implementa um detector de blobs baseado em cor. </div><div class="ttdef"><b>Definition:</b> <a href="_color_blob_detector_h_f_8h_source.html#l00045">ColorBlobDetectorHF.h:45</a></div></div>
<div class="ttc" id="class_viscv_1_1_cv_image_g_u_i_html_a4ae2d7fd59643d69dfe83dff37582501"><div class="ttname"><a href="class_viscv_1_1_cv_image_g_u_i.html#a4ae2d7fd59643d69dfe83dff37582501">Viscv::CvImageGUI::setImg</a></div><div class="ttdeci">void setImg(const cv::Mat &amp;img)</div><div class="ttdoc">Set the value of member &#39;m_img&#39; to &#39;img&#39;. </div><div class="ttdef"><b>Definition:</b> <a href="_cv_image_g_u_i_8cpp_source.html#l00165">CvImageGUI.cpp:165</a></div></div>
<div class="ttc" id="class_vision_core_1_1_evaluation_1_1_tracker_evaluator_html"><div class="ttname"><a href="class_vision_core_1_1_evaluation_1_1_tracker_evaluator.html">VisionCore::Evaluation::TrackerEvaluator</a></div><div class="ttdoc">Provides algorithms for performance evaluation of trackers. </div><div class="ttdef"><b>Definition:</b> <a href="_vision_evaluation_8h_source.html#l01062">VisionEvaluation.h:1062</a></div></div>
<div class="ttc" id="class_viscv_1_1_cv_image_g_u_i_html_a128346d089624c27ffddb80f0526dc24"><div class="ttname"><a href="class_viscv_1_1_cv_image_g_u_i.html#a128346d089624c27ffddb80f0526dc24">Viscv::CvImageGUI::getImg</a></div><div class="ttdeci">const cv::Mat &amp; getImg() const </div><div class="ttdoc">Returns the value of member &#39;m_img&#39;. </div><div class="ttdef"><b>Definition:</b> <a href="_cv_image_g_u_i_8cpp_source.html#l00157">CvImageGUI.cpp:157</a></div></div>
<div class="ttc" id="class_vision_core_1_1_interfaces_1_1_frame_server_html"><div class="ttname"><a href="class_vision_core_1_1_interfaces_1_1_frame_server.html">VisionCore::Interfaces::FrameServer</a></div><div class="ttdoc">Interface for a source of frames. The frames can come from a video file, webcam, set of images...</div><div class="ttdef"><b>Definition:</b> <a href="_vision_interfaces_8h_source.html#l00084">VisionInterfaces.h:84</a></div></div>
<div class="ttc" id="class_viscv_1_1_frame_server_cv_html"><div class="ttname"><a href="class_viscv_1_1_frame_server_cv.html">Viscv::FrameServerCv</a></div><div class="ttdoc">Implementantion of interface FrameServer using OpenCv. </div><div class="ttdef"><b>Definition:</b> <a href="_frame_server_cv_8h_source.html#l00043">FrameServerCv.h:43</a></div></div>
<div class="ttc" id="class_vision_core_1_1_abstractions_1_1_abstract_auto_tracker_html"><div class="ttname"><a href="class_vision_core_1_1_abstractions_1_1_abstract_auto_tracker.html">VisionCore::Abstractions::AbstractAutoTracker</a></div><div class="ttdoc">Implements a tracker that can automatically detect and track multiple objects by creating a individua...</div><div class="ttdef"><b>Definition:</b> <a href="_vision_abstractions_8h_source.html#l00076">VisionAbstractions.h:76</a></div></div>
<div class="ttc" id="class_vision_core_1_1_abstractions_1_1_abstract_auto_tracker_html_af1a54610c9af7fb54d00e4be2e75609e"><div class="ttname"><a href="class_vision_core_1_1_abstractions_1_1_abstract_auto_tracker.html#af1a54610c9af7fb54d00e4be2e75609e">VisionCore::Abstractions::AbstractAutoTracker::update</a></div><div class="ttdeci">virtual void update(const Frame&lt; TImg &gt; &amp;frame)</div><div class="ttdoc">Updates the object position (state) given a new frame. </div><div class="ttdef"><b>Definition:</b> <a href="_vision_abstractions_8h_source.html#l00163">VisionAbstractions.h:163</a></div></div>
<div class="ttc" id="class_vision_core_1_1_async_1_1_async_detector_wrap_html"><div class="ttname"><a href="class_vision_core_1_1_async_1_1_async_detector_wrap.html">VisionCore::Async::AsyncDetectorWrap&lt; cv::Mat, cv::Rect &gt;</a></div></div>
<div class="ttc" id="namespace_viscv_html"><div class="ttname"><a href="namespace_viscv.html">Viscv</a></div><div class="ttdoc">Provides several computer vision methods for detection an. </div><div class="ttdef"><b>Definition:</b> <a href="_a_r_tag_detector_b_l_p_8cpp_source.html#l00031">ARTagDetectorBLP.cpp:31</a></div></div>
<div class="ttc" id="class_vision_core_1_1_abstractions_1_1_abstract_auto_tracker_html_afdfc24d8a5f14f873caf5e1d3ff55546"><div class="ttname"><a href="class_vision_core_1_1_abstractions_1_1_abstract_auto_tracker.html#afdfc24d8a5f14f873caf5e1d3ff55546">VisionCore::Abstractions::AbstractAutoTracker::getLastTrack</a></div><div class="ttdeci">virtual const std::map&lt; long, TObj &gt; &amp; getLastTrack()</div><div class="ttdoc">Returns a reference to the current estimated object state. </div><div class="ttdef"><b>Definition:</b> <a href="_vision_abstractions_8h_source.html#l00147">VisionAbstractions.h:147</a></div></div>
<div class="ttc" id="class_dataset_fire_html"><div class="ttname"><a href="class_dataset_fire.html">DatasetFire</a></div><div class="ttdef"><b>Definition:</b> <a href="_dataset_fire_8h_source.html#l00043">DatasetFire.h:43</a></div></div>
<div class="ttc" id="class_viscv_1_1_multi_object_tracker_c_c_cv_html"><div class="ttname"><a href="class_viscv_1_1_multi_object_tracker_c_c_cv.html">Viscv::MultiObjectTrackerCCCv</a></div><div class="ttdoc">Detecta e rastreia multiplos objetos utilizando o rastreador &#39;ObjectTrackerCCCv&#39;. ...</div><div class="ttdef"><b>Definition:</b> <a href="_multi_object_tracker_c_c_cv_8h_source.html#l00038">MultiObjectTrackerCCCv.h:38</a></div></div>
<div class="ttc" id="class_viscv_1_1_color_blob_detector_h_f_html_a76311b08b5cb9df65524e070e9c15048"><div class="ttname"><a href="class_viscv_1_1_color_blob_detector_h_f.html#a76311b08b5cb9df65524e070e9c15048">Viscv::ColorBlobDetectorHF::detect</a></div><div class="ttdeci">std::vector&lt; std::vector&lt; cv::Point &gt; &gt; detect(const cv::Mat &amp;img) const </div><div class="ttdoc">Detecta blobs em uma imagem. </div><div class="ttdef"><b>Definition:</b> <a href="_color_blob_detector_h_f_8cpp_source.html#l00048">ColorBlobDetectorHF.cpp:48</a></div></div>
<div class="ttc" id="class_viscv_1_1_a_r_tag_detector_b_l_p_html_a0065a0a0e3dbed236849bf406e6cde66"><div class="ttname"><a href="class_viscv_1_1_a_r_tag_detector_b_l_p.html#a0065a0a0e3dbed236849bf406e6cde66">Viscv::ARTagDetectorBLP::detect</a></div><div class="ttdeci">std::vector&lt; ARTag &gt; detect(const cv::Mat &amp;img) const </div><div class="ttdoc">Detects objects in the image and returns a vector with the detected objects. </div><div class="ttdef"><b>Definition:</b> <a href="_a_r_tag_detector_b_l_p_8cpp_source.html#l00054">ARTagDetectorBLP.cpp:54</a></div></div>
<div class="ttc" id="class_vision_core_1_1_abstractions_1_1_detector_based_multi_tracker_html"><div class="ttname"><a href="class_vision_core_1_1_abstractions_1_1_detector_based_multi_tracker.html">VisionCore::Abstractions::DetectorBasedMultiTracker</a></div><div class="ttdoc">A tracker that applies a detector on every frame. </div><div class="ttdef"><b>Definition:</b> <a href="_vision_abstractions_8h_source.html#l00319">VisionAbstractions.h:319</a></div></div>
<div class="ttc" id="struct_vision_core_1_1_data_structures_1_1_frame_html_a14dc2ac21bd59eb0bce43d5f839b8de0"><div class="ttname"><a href="struct_vision_core_1_1_data_structures_1_1_frame.html#a14dc2ac21bd59eb0bce43d5f839b8de0">VisionCore::DataStructures::Frame::getNumber</a></div><div class="ttdeci">unsigned long getNumber() const </div><div class="ttdoc">Returns the frame number. </div><div class="ttdef"><b>Definition:</b> <a href="_vision_data_structures_8h_source.html#l00094">VisionDataStructures.h:94</a></div></div>
<div class="ttc" id="class_fire_tracker_s_a_html"><div class="ttname"><a href="class_fire_tracker_s_a.html">FireTrackerSA</a></div><div class="ttdef"><b>Definition:</b> <a href="_fire_tracker_s_a_8h_source.html#l00039">FireTrackerSA.h:39</a></div></div>
<div class="ttc" id="class_viscv_1_1_cv_image_g_u_i_html"><div class="ttname"><a href="class_viscv_1_1_cv_image_g_u_i.html">Viscv::CvImageGUI</a></div><div class="ttdoc">Esta classe cria uma janela para exibição de imagens. </div><div class="ttdef"><b>Definition:</b> <a href="_cv_image_g_u_i_8h_source.html#l00040">CvImageGUI.h:40</a></div></div>
<div class="ttc" id="class_viscv_1_1_circle_detector_h_t_c_f_html"><div class="ttname"><a href="class_viscv_1_1_circle_detector_h_t_c_f.html">Viscv::CircleDetectorHTCF</a></div><div class="ttdoc">Detects circles using Hough Transform and (optionally) Color Filter (HTCF). </div><div class="ttdef"><b>Definition:</b> <a href="_circle_detector_h_t_c_f_8h_source.html#l00057">CircleDetectorHTCF.h:57</a></div></div>
<div class="ttc" id="class_viscv_1_1_dataset_f_d_d_b_html"><div class="ttname"><a href="class_viscv_1_1_dataset_f_d_d_b.html">Viscv::DatasetFDDB</a></div><div class="ttdoc">Dataset público de várias imagens contendo pessoas em ambientes do dia-a-dia. </div><div class="ttdef"><b>Definition:</b> <a href="_dataset_f_d_d_b_8h_source.html#l00040">DatasetFDDB.h:40</a></div></div>
<div class="ttc" id="class_viscv_1_1_frame_server_cv_html_a634d758e1811c32295f5665e4f8a0178"><div class="ttname"><a href="class_viscv_1_1_frame_server_cv.html#a634d758e1811c32295f5665e4f8a0178">Viscv::FrameServerCv::hasNext</a></div><div class="ttdeci">virtual bool hasNext()</div><div class="ttdoc">Return true if there exist more frames available. </div><div class="ttdef"><b>Definition:</b> <a href="_frame_server_cv_8cpp_source.html#l00107">FrameServerCv.cpp:107</a></div></div>
<div class="ttc" id="namespace_vision_core_html"><div class="ttname"><a href="namespace_vision_core.html">VisionCore</a></div><div class="ttdoc">Contains the core functionalities of CvWorks. </div><div class="ttdef"><b>Definition:</b> <a href="_vision_abstractions_8h_source.html#l00054">VisionAbstractions.h:54</a></div></div>
<div class="ttc" id="class_vision_core_1_1_evaluation_1_1_detector_evaluator_html"><div class="ttname"><a href="class_vision_core_1_1_evaluation_1_1_detector_evaluator.html">VisionCore::Evaluation::DetectorEvaluator</a></div><div class="ttdoc">Provides algorithms for performance evaluation of detectors. </div><div class="ttdef"><b>Definition:</b> <a href="_vision_evaluation_8h_source.html#l00373">VisionEvaluation.h:373</a></div></div>
<div class="ttc" id="class_viscv_1_1_object_detector_f_m_cv_html"><div class="ttname"><a href="class_viscv_1_1_object_detector_f_m_cv.html">Viscv::ObjectDetectorFMCv</a></div><div class="ttdoc">Implementa um detector de objetos genéricos utilizando SIFT features. </div><div class="ttdef"><b>Definition:</b> <a href="_object_detector_f_m_cv_8h_source.html#l00038">ObjectDetectorFMCv.h:38</a></div></div>
<div class="ttc" id="class_vision_core_1_1_evaluation_1_1_detector_evaluator_html_affd22efb035f7daffbc8ce1ae4b1e85f"><div class="ttname"><a href="class_vision_core_1_1_evaluation_1_1_detector_evaluator.html#affd22efb035f7daffbc8ce1ae4b1e85f">VisionCore::Evaluation::DetectorEvaluator::evaluateDetector</a></div><div class="ttdeci">DetectorEvalResult evaluateDetector(const Detector&lt; TImg, TObj1 &gt; &amp;det, DetectionDataset&lt; TImg, TObj2 &gt; &amp;dataset, std::function&lt; double(TObj1 &amp;, TObj2 &amp;)&gt; match)</div><div class="ttdoc">Runs a detector over each dataset image and compute the performance statistics, printing the result i...</div><div class="ttdef"><b>Definition:</b> <a href="_vision_evaluation_8h_source.html#l00648">VisionEvaluation.h:648</a></div></div>
<div class="ttc" id="class_viscv_1_1_object_detector_f_m_cv_html_a1d0c071b6e7a19b192c86ca0e47fd642"><div class="ttname"><a href="class_viscv_1_1_object_detector_f_m_cv.html#a1d0c071b6e7a19b192c86ca0e47fd642">Viscv::ObjectDetectorFMCv::detect</a></div><div class="ttdeci">std::vector&lt; cv::Rect &gt; detect(const cv::Mat &amp;img) const </div><div class="ttdoc">Detects objects in the image and returns a vector with the detected objects. </div><div class="ttdef"><b>Definition:</b> <a href="_object_detector_f_m_cv_8cpp_source.html#l00056">ObjectDetectorFMCv.cpp:56</a></div></div>
<div class="ttc" id="class_viscv_1_1_a_r_tag_detector_b_l_p_html"><div class="ttname"><a href="class_viscv_1_1_a_r_tag_detector_b_l_p.html">Viscv::ARTagDetectorBLP</a></div><div class="ttdoc">Implements a augmented reality tag detector. </div><div class="ttdef"><b>Definition:</b> <a href="_a_r_tag_detector_b_l_p_8h_source.html#l00070">ARTagDetectorBLP.h:70</a></div></div>
<div class="ttc" id="struct_vision_core_1_1_data_structures_1_1_frame_html"><div class="ttname"><a href="struct_vision_core_1_1_data_structures_1_1_frame.html">VisionCore::DataStructures::Frame&lt; cv::Mat &gt;</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_33c78a012c8d08979f57a54a07694c46.html">Tests</a></li><li class="navelem"><a class="el" href="dir_2f3842fc580d544d8cc14be5b6c2dc54.html">VisionTests</a></li><li class="navelem"><b>main.cpp</b></li>
    <li class="footer">Generated on Wed Nov 18 2015 11:12:07 for CvWorks by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.10 </li>
  </ul>
</div>
</body>
</html>
