<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>CvWorks: D:/FURG/Software/CvWorksRelease1/Components/FireDetector/FireTrackerChenebert.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="C3.jpg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">CvWorks
   &#160;<span id="projectnumber">0.4</span>
   </div>
   <div id="projectbrief">Computer Vision Framework</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_fire_tracker_chenebert_8cpp_source.html','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">FireTrackerChenebert.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">Copyright (c) 2015, FURG - Universidade Federal do Rio Grande</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">All rights reserved.</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">Redistribution and use in source and binary forms, with or without</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">modification, are permitted provided that the following conditions are met:</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">    * Redistributions of source code must retain the above copyright</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">      notice, this list of conditions and the following disclaimer.</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">    * Redistributions in binary form must reproduce the above copyright</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">      notice, this list of conditions and the following disclaimer in the</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">      documentation and/or other materials provided with the distribution.</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">    * Neither the name of the Universidade Federal do Rio Grande nor the</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">      names of its contributors may be used to endorse or promote products</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">      derived from this software without specific prior written permission.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">DISCLAIMED. IN NO EVENT SHALL UNIVERSIDADE FEDERAL DO RIO GRANDE BE LIABLE FOR ANY</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;FireTrackerChenebert.h&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;TextureGLCM.h&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div>
<div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="class_fire_tracker_chenebert.html#ac7e0977fa702f98038bbe303df458a6c">   32</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="class_fire_tracker_chenebert.html#ac7e0977fa702f98038bbe303df458a6c">FireTrackerChenebert::lostTrack</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordflow">if</span>(m_currentTrack.empty())</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div>
<div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="class_fire_tracker_chenebert.html#ae1ccd303e827f5d00620e54bb11a968c">   40</a></span>&#160;<span class="keyword">const</span> std::vector&lt;std::vector&lt;cv::Point&gt;&gt;&amp; <a class="code" href="class_fire_tracker_chenebert.html#ae1ccd303e827f5d00620e54bb11a968c">FireTrackerChenebert::getLastTrack</a>()</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">return</span> m_currentTrack;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="class_fire_tracker_chenebert.html#ab233da15b6c7aad7d83c67057a558bd4">   47</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="class_fire_tracker_chenebert.html#ab233da15b6c7aad7d83c67057a558bd4">FireTrackerChenebert::update</a>(<span class="keyword">const</span> <a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html">VisionCore::Frame&lt;cv::Mat&gt;</a>&amp; frame) {</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    m_currentTrack.clear();</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="class_fire_tracker_chenebert.html#a41191012c3a576338e0a1c18e4670e03">spatial_data</a>.clear();</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <a class="code" href="class_fire_tracker_chenebert.html#aa436b53f5f363c7ef9ae5dab5d8b6a5b">current_contours</a>.clear();</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    cv::Mat img = frame.<a class="code" href="struct_vision_core_1_1_data_structures_1_1_frame.html#a8531d354b20874961d98c796e3973b4d">getImg</a>();</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="class_fire_tracker_chenebert.html#ac139cc55cf55def96683867873bc9841">color_classified</a> = cv::Mat::zeros(img.rows, img.cols, CV_8UC1);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordflow">if</span>(img.size() == last_frame.size()){</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        cv::absdiff(img, last_frame, motion);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        cv::cvtColor(motion, motion, CV_BGR2GRAY);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        cv::threshold(motion, motion, 5, 255, CV_THRESH_BINARY);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        cv::erode(motion, motion, cv::Mat::ones(cv::Size(2,2), CV_8UC1));</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        motion = cv::Mat::zeros(img.size(), CV_8UC1);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    }</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    last_frame = img.clone();</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    cv::Mat img_hsv;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    cv::cvtColor(img, img_hsv, CV_BGR2HSV);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    std::vector&lt;std::vector&lt;float&gt;&gt; channels_hsv, channels_rgb;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    TemporalDataExtractor tde;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    std::vector&lt;cv::Mat&gt; planes, hsvPlanes;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="comment">//Copy each color to his own array</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    cv::split(img, planes); </div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    cv::split(img_hsv, hsvPlanes);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordtype">unsigned</span> S_T = 60, R_T = 125;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="comment">//for each row in the image</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="preprocessor">#pragma loop(hint_parallel(0))</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keywordflow">for</span>( <span class="keywordtype">int</span> y = 0; y &lt; img.rows; y++ )</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    {</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        uchar* ptr_b = planes[0].ptr&lt;uchar&gt;(y);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        uchar* ptr_g = planes[1].ptr&lt;uchar&gt;(y);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        uchar* ptr_r = planes[2].ptr&lt;uchar&gt;(y);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        uchar* ptr_s = hsvPlanes[1].ptr&lt;uchar&gt;(y);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        uchar *ptr_bin = <a class="code" href="class_fire_tracker_chenebert.html#ac139cc55cf55def96683867873bc9841">color_classified</a>.ptr&lt;uchar&gt;(y);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="comment">//for each column in the image</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="preprocessor">#pragma loop(hint_parallel(0))</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">for</span>( <span class="keywordtype">int</span> x = 0; x &lt; img.cols; x++ )</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        {</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <span class="keywordflow">if</span> (ptr_r[x] &gt;= R_T &amp;&amp;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                ptr_r[x] &gt;= ptr_g[x] &amp;&amp;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                ptr_g[x] &gt; ptr_b[x] &amp;&amp;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                ptr_s[x] &gt;= ((255 - ptr_r[x]) * S_T)/R_T )</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                ptr_bin[x] = 255;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        }</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    }</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <a class="code" href="class_fire_tracker_chenebert.html#ac139cc55cf55def96683867873bc9841">color_classified</a>.convertTo(<a class="code" href="class_fire_tracker_chenebert.html#ac139cc55cf55def96683867873bc9841">color_classified</a>, CV_8UC1);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="comment">//END of color classification</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    std::vector&lt;std::vector&lt;cv::Point&gt; &gt; contours;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    std::vector&lt;cv::Vec4i&gt; hierarchy;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    cv::Mat canny_output = <a class="code" href="class_fire_tracker_chenebert.html#ac139cc55cf55def96683867873bc9841">color_classified</a>.clone();</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    cv::findContours( canny_output, contours, hierarchy, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_NONE);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="comment">//getStatistics(img, contours);</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    getTextureFeatures(img, contours);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="class_fire_tracker_chenebert.html#abc9326cea4683208d23aa1854bf6cd89">dont_classify_by_region_stats</a>){</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="class_fire_tracker_chenebert.html#a41191012c3a576338e0a1c18e4670e03">spatial_data</a>.size()&gt;0){</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            cv::Mat region_data = cv::Mat::zeros(<a class="code" href="class_fire_tracker_chenebert.html#a41191012c3a576338e0a1c18e4670e03">spatial_data</a>.size(), <a class="code" href="class_fire_tracker_chenebert.html#a41191012c3a576338e0a1c18e4670e03">spatial_data</a>[0].size(), CV_32F);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i&lt; region_data.rows; i++){</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                <span class="keywordtype">float</span> *p = region_data.ptr&lt;<span class="keywordtype">float</span>&gt;(i);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> j = 0; j &lt; <a class="code" href="class_fire_tracker_chenebert.html#a41191012c3a576338e0a1c18e4670e03">spatial_data</a>[0].size(); j++)</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    p[j] = <a class="code" href="class_fire_tracker_chenebert.html#a41191012c3a576338e0a1c18e4670e03">spatial_data</a>[i][j];</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            }</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            std::vector&lt;std::vector&lt;cv::Point&gt;&gt; tmp_c;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            std::vector&lt;std::vector&lt;float&gt;&gt; tmp_stat;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i&lt; region_data.rows; i++){</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                <span class="comment">//each region is classified using the classifier</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                cv::Mat r = region_data.row(i);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                <span class="keywordflow">if</span>(<a class="code" href="class_fire_tracker_chenebert.html#aadaf4276495f46a63d9cdf1a53e6c318">region_classifier</a>.classify(r) &gt; 0.0){</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    tmp_c.push_back(<a class="code" href="class_fire_tracker_chenebert.html#aa436b53f5f363c7ef9ae5dab5d8b6a5b">current_contours</a>[i]);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                    tmp_stat.push_back(<a class="code" href="class_fire_tracker_chenebert.html#a41191012c3a576338e0a1c18e4670e03">spatial_data</a>[i]);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                }</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <a class="code" href="class_fire_tracker_chenebert.html#aa436b53f5f363c7ef9ae5dab5d8b6a5b">current_contours</a> = tmp_c; <a class="code" href="class_fire_tracker_chenebert.html#a41191012c3a576338e0a1c18e4670e03">spatial_data</a> = tmp_stat;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        }</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        m_currentTrack = cs.smoothContoursP(<a class="code" href="class_fire_tracker_chenebert.html#aa436b53f5f363c7ef9ae5dab5d8b6a5b">current_contours</a>, .01f);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    }</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        m_currentTrack = <a class="code" href="class_fire_tracker_chenebert.html#aa436b53f5f363c7ef9ae5dab5d8b6a5b">current_contours</a>;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">if</span>(show_debug_info){</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        cv::imshow(<span class="stringliteral">&quot;motion&quot;</span>, motion);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        cv::normalize(<a class="code" href="class_fire_tracker_chenebert.html#ac139cc55cf55def96683867873bc9841">color_classified</a>,<a class="code" href="class_fire_tracker_chenebert.html#ac139cc55cf55def96683867873bc9841">color_classified</a>,0,255, cv::NORM_MINMAX);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        cv::imshow(<span class="stringliteral">&quot;color segmentation&quot;</span>, <a class="code" href="class_fire_tracker_chenebert.html#ac139cc55cf55def96683867873bc9841">color_classified</a>);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    }</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;}</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="keywordtype">float</span> FireTrackerChenebert::getRoundness(std::vector&lt;cv::Point&gt; &amp;in){</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    std::vector&lt;std::vector&lt;cv::Point&gt;&gt; out;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="comment">// Find the convex hull object for each contour</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    std::vector&lt;cv::Point&gt; convex_hull;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    convexHull( cv::Mat(in), convex_hull, <span class="keyword">false</span> ); </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordtype">float</span> br = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(cv::arcLength(cv::Mat(in), <span class="keyword">true</span>) / cv::arcLength(cv::Mat(convex_hull), <span class="keyword">true</span>));</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordflow">return</span> br;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;}</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="keywordtype">void</span> FireTrackerChenebert::getTextureFeatures(cv::Mat &amp;image, std::vector&lt;std::vector&lt;cv::Point&gt;&gt; &amp;in){</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="comment">// Cria o objeto textura</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    TextureGLCM* texture = <span class="keyword">new</span> TextureGLCM( );</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    TextureGLCM::GLCM* glcm;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordflow">for</span>( <span class="keywordtype">unsigned</span> i = 0; i&lt; in.size(); i++ ){ <span class="comment">// for each contour</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="keywordflow">if</span>(cv::contourArea(in[i])&gt; 150){ <span class="comment">//very small areas are ignored</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment"></span>            std::vector&lt;float&gt; contour_data; contour_data.resize(30);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="comment">//get data</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            cv::Rect roi = cv::boundingRect(in[i]);</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <span class="comment">//create mask</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            cv::Mat mask = cv::Mat::zeros(cv::Size(image.cols, image.rows), CV_8UC1);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            drawContours( mask, in, i, cv::Scalar::all(1), -1);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <span class="comment">//crop areas</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            mask = mask(roi);</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            cv::Mat the_region = image(roi).clone();</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            std::vector&lt;cv::Mat&gt; hsv_channels;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            cv::split(the_region, hsv_channels); </div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> c=0; c &lt; 2; c++){ <span class="comment">//for each channel</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                cv::Mat cur_img  = hsv_channels[c].clone(); cur_img.convertTo(cur_img, mask.type());</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                <span class="keywordtype">int</span> histSize[] = {10};  <span class="keywordtype">float</span> sranges[] = { 0, 256 }; <span class="keyword">const</span> <span class="keywordtype">float</span>* ranges[] = {  sranges };</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                cv::Mat hist;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                <span class="comment">// we compute the histogram from the 0-th and 1-st channels</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                <span class="keywordtype">int</span> channels[] = {0};</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                calcHist( &amp;cur_img, 1, channels, mask, </div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                    hist, 1, histSize, ranges,</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                    <span class="keyword">true</span>, <span class="comment">// the histogram is uniform</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                    <span class="keyword">false</span> );</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                hist = hist / roi.area(); <span class="comment">//normalize</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                <span class="comment">// uses 10 bins</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> j=0; j &lt; 10; j++)</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                    contour_data[10*c + j] = hist.at&lt;<span class="keywordtype">float</span>&gt;(cv::Point(0,j));</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                <span class="comment">//GLCM  completa um vetor com 30 variáveis</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                hsv_channels[c].convertTo(hsv_channels[c], CV_8UC1);</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                IplImage hsv_c=hsv_channels[c];</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                IplImage* pGray = cvCloneImage(&amp;hsv_c);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                <span class="comment">//Direção da Textura</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> StepDirections[] = { 0,1,-1,1,-1,0,-1,-1 };</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                <span class="comment">// buid the GLCM</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                glcm = texture-&gt;CreateGLCM(pGray, 4, StepDirections, 1, CV_GLCM_OPTIMIZATION_LUT); </div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                texture-&gt;CreateGLCMDescriptors(glcm, CV_GLCMDESC_OPTIMIZATION_ALLOWDOUBLENEST); </div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                contour_data[20 + 5*c] = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(texture-&gt;GetGLCMDescriptor(glcm, 0, CV_GLCMDESC_ENERGY));</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                contour_data[21 + 5*c] = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(texture-&gt;GetGLCMDescriptor(glcm, 0, CV_GLCMDESC_ENTROPY));</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                contour_data[22 + 5*c] = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(texture-&gt;GetGLCMDescriptor(glcm, 0, CV_GLCMDESC_CONTRAST));</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                contour_data[23 + 5*c] = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(texture-&gt;GetGLCMDescriptor(glcm, 0, CV_GLCMDESC_HOMOGENITY));</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                contour_data[24 + 5*c] = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(texture-&gt;GetGLCMDescriptor(glcm, 0, CV_GLCMDESC_CORRELATION));</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                cvReleaseImage(&amp;pGray);</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                texture-&gt;ReleaseGLCM(&amp;glcm, CV_GLCM_ALL);</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                <span class="comment">//FIM GLCM</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            }</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            <span class="comment">//adiciona dados nas estatístisticas</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            <a class="code" href="class_fire_tracker_chenebert.html#a41191012c3a576338e0a1c18e4670e03">spatial_data</a>.push_back(contour_data);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            <a class="code" href="class_fire_tracker_chenebert.html#aa436b53f5f363c7ef9ae5dab5d8b6a5b">current_contours</a>.push_back(in[i]);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            <span class="keywordflow">if</span> (show_debug_info)</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> att_count = 0; att_count &lt; contour_data.size(); att_count++){</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                    std::cout &lt;&lt; att_count &lt;&lt;<span class="stringliteral">&quot; = &quot;</span> &lt;&lt;contour_data[att_count] &lt;&lt; <span class="stringliteral">&quot; | &quot;</span>;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                }</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        }<span class="comment">//endif</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    }<span class="comment">//end contours for</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keyword">delete</span> texture;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;}</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;cv::Scalar FireTrackerChenebert::getMedian(cv::Mat &amp;image, cv::Mat &amp;mask){</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    cv::Scalar out;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    std::vector&lt;cv::Mat&gt; img_channels;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    cv::split(image, img_channels); </div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> i=0; i &lt; img_channels.size(); i++){ <span class="comment">//for each channel</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        cv::Mat cur_img  = img_channels[i].clone(); cur_img.convertTo(cur_img, mask.type());</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <span class="keywordtype">int</span> histSize[] = {256}; <span class="keywordtype">float</span> sranges[] = { 0, 256 }; <span class="keyword">const</span> <span class="keywordtype">float</span>* ranges[] = {  sranges };</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        cv::Mat hist;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <span class="comment">// we compute the histogram from the 0-th and 1-st channels</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="keywordtype">int</span> channels[] = {0};</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        calcHist( &amp;cur_img, 1, channels, mask, </div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            hist, 1, histSize, ranges,</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            <span class="keyword">true</span>, <span class="comment">// the histogram is uniform</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            <span class="keyword">false</span> );</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        <span class="keywordtype">long</span> sum = 0;   <span class="keywordtype">int</span> bin = 0;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        cv::bitwise_and(cur_img, mask, cur_img);</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        cv::Scalar maxElements = cv::sum(cur_img);</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        <span class="comment">// the bean where the midlle of the values is reached is the center point (or median)</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        <span class="keywordflow">while</span>((sum &lt; maxElements[0]/2) &amp;&amp; (bin &lt; 255))</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        {</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            sum += (long) hist.at&lt;<span class="keywordtype">float</span>&gt;(bin);</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            bin ++;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        }</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        out[i] = bin;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    }</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="comment">//return the median</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;}</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div>
<div class="line"><a name="l00314"></a><span class="lineno"><a class="line" href="class_fire_tracker_chenebert.html#addfad480395fa1a2af767e8efefb8980">  314</a></span>&#160;<a class="code" href="class_fire_tracker_chenebert.html#addfad480395fa1a2af767e8efefb8980">FireTrackerChenebert::FireTrackerChenebert</a>(std::string region_classification_model){</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    frame_rate = 29; static_video = <span class="keyword">false</span>; m_lostTrack = <span class="keyword">true</span>; show_debug_info = <span class="keyword">false</span>; <a class="code" href="class_fire_tracker_chenebert.html#abc9326cea4683208d23aa1854bf6cd89">dont_classify_by_region_stats</a> = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keywordflow">if</span>(!region_classification_model.empty())</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        <a class="code" href="class_fire_tracker_chenebert.html#aadaf4276495f46a63d9cdf1a53e6c318">region_classifier</a>.loadClassifier(region_classification_model);</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;}</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div>
<div class="line"><a name="l00323"></a><span class="lineno"><a class="line" href="class_fire_tracker_chenebert.html#ab323eee4bdbac7f3d9783aa7840440ef">  323</a></span>&#160;<a class="code" href="class_fire_tracker_chenebert.html#ab323eee4bdbac7f3d9783aa7840440ef">FireTrackerChenebert::~FireTrackerChenebert</a>(<span class="keywordtype">void</span>)</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;{</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;}</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div>
<div class="line"><a name="l00332"></a><span class="lineno"><a class="line" href="class_fire_tracker_chenebert.html#a68d4ec4232aa3139b0ffa3196f2aa58a">  332</a></span>&#160;std::vector&lt;std::vector&lt;float&gt;&gt; <a class="code" href="class_fire_tracker_chenebert.html#a68d4ec4232aa3139b0ffa3196f2aa58a">FireTrackerChenebert::generateRegionTrainingData</a>(std::function&lt;<span class="keywordtype">double</span>(std::vector&lt;cv::Point&gt; &amp;dt, cv::Rect &amp;gt)&gt; simFcn, std::vector&lt;cv::Rect&gt; groundTruth){</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    std::vector&lt;std::vector&lt;float&gt;&gt; the_validated_contour;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="comment">//get the good contours for training</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> i = 0; i &lt; <a class="code" href="class_fire_tracker_chenebert.html#aa436b53f5f363c7ef9ae5dab5d8b6a5b">current_contours</a>.size(); i ++ ){</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        <span class="keywordflow">for</span>(cv::Rect r: groundTruth){</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            <span class="keywordflow">if</span>(simFcn(<a class="code" href="class_fire_tracker_chenebert.html#aa436b53f5f363c7ef9ae5dab5d8b6a5b">current_contours</a>[i], r) &gt; .8){<span class="comment">//is in the gt</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                std::vector&lt;float&gt; data = <a class="code" href="class_fire_tracker_chenebert.html#a41191012c3a576338e0a1c18e4670e03">spatial_data</a>[i];</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                <span class="comment">//if(data[4]&gt;80.0){ //red channel</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                data.push_back((<span class="keywordtype">float</span>)1);</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                the_validated_contour.push_back(data);</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                <span class="comment">//}</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            }</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        }</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    }</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="comment">//get the bad contours for training</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> i = 0; i &lt; <a class="code" href="class_fire_tracker_chenebert.html#aa436b53f5f363c7ef9ae5dab5d8b6a5b">current_contours</a>.size(); i ++ ){</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        <span class="keywordtype">bool</span> has_intersection = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        <span class="keywordflow">for</span>(cv::Rect r: groundTruth){</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            <span class="keywordflow">if</span>(simFcn(<a class="code" href="class_fire_tracker_chenebert.html#aa436b53f5f363c7ef9ae5dab5d8b6a5b">current_contours</a>[i], r) &gt; 0){<span class="comment">//is out of the gt</span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                has_intersection = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            }</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        }</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        <span class="keywordflow">if</span>(!has_intersection){</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;            std::vector&lt;float&gt; data = <a class="code" href="class_fire_tracker_chenebert.html#a41191012c3a576338e0a1c18e4670e03">spatial_data</a>[i];</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            data.push_back((<span class="keywordtype">double</span>)0);</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            the_validated_contour.push_back(data);</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        }</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    }</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="keywordflow">return</span> the_validated_contour;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;}</div>
<div class="ttc" id="class_fire_tracker_chenebert_html_ac7e0977fa702f98038bbe303df458a6c"><div class="ttname"><a href="class_fire_tracker_chenebert.html#ac7e0977fa702f98038bbe303df458a6c">FireTrackerChenebert::lostTrack</a></div><div class="ttdeci">bool lostTrack() const </div><div class="ttdoc">True if no fire is detected. </div><div class="ttdef"><b>Definition:</b> <a href="_fire_tracker_chenebert_8cpp_source.html#l00032">FireTrackerChenebert.cpp:32</a></div></div>
<div class="ttc" id="class_fire_tracker_chenebert_html_a68d4ec4232aa3139b0ffa3196f2aa58a"><div class="ttname"><a href="class_fire_tracker_chenebert.html#a68d4ec4232aa3139b0ffa3196f2aa58a">FireTrackerChenebert::generateRegionTrainingData</a></div><div class="ttdeci">std::vector&lt; std::vector&lt; float &gt; &gt; generateRegionTrainingData(std::function&lt; double(std::vector&lt; cv::Point &gt; &amp;dt, cv::Rect &amp;gt)&gt; simFcn, std::vector&lt; cv::Rect &gt; groundTruth)</div><div class="ttdef"><b>Definition:</b> <a href="_fire_tracker_chenebert_8cpp_source.html#l00332">FireTrackerChenebert.cpp:332</a></div></div>
<div class="ttc" id="struct_vision_core_1_1_data_structures_1_1_frame_html_a8531d354b20874961d98c796e3973b4d"><div class="ttname"><a href="struct_vision_core_1_1_data_structures_1_1_frame.html#a8531d354b20874961d98c796e3973b4d">VisionCore::DataStructures::Frame::getImg</a></div><div class="ttdeci">const TImg &amp; getImg() const </div><div class="ttdoc">Returns a reference to the frame image. </div><div class="ttdef"><b>Definition:</b> <a href="_vision_data_structures_8h_source.html#l00084">VisionDataStructures.h:84</a></div></div>
<div class="ttc" id="class_fire_tracker_chenebert_html_aa436b53f5f363c7ef9ae5dab5d8b6a5b"><div class="ttname"><a href="class_fire_tracker_chenebert.html#aa436b53f5f363c7ef9ae5dab5d8b6a5b">FireTrackerChenebert::current_contours</a></div><div class="ttdeci">std::vector&lt; std::vector&lt; cv::Point &gt; &gt; current_contours</div><div class="ttdoc">temporary contour store for the current frame </div><div class="ttdef"><b>Definition:</b> <a href="_fire_tracker_chenebert_8h_source.html#l00101">FireTrackerChenebert.h:101</a></div></div>
<div class="ttc" id="class_fire_tracker_chenebert_html_aadaf4276495f46a63d9cdf1a53e6c318"><div class="ttname"><a href="class_fire_tracker_chenebert.html#aadaf4276495f46a63d9cdf1a53e6c318">FireTrackerChenebert::region_classifier</a></div><div class="ttdeci">C45Helper region_classifier</div><div class="ttdoc">Random Forests. </div><div class="ttdef"><b>Definition:</b> <a href="_fire_tracker_chenebert_8h_source.html#l00085">FireTrackerChenebert.h:85</a></div></div>
<div class="ttc" id="class_fire_tracker_chenebert_html_abc9326cea4683208d23aa1854bf6cd89"><div class="ttname"><a href="class_fire_tracker_chenebert.html#abc9326cea4683208d23aa1854bf6cd89">FireTrackerChenebert::dont_classify_by_region_stats</a></div><div class="ttdeci">bool dont_classify_by_region_stats</div><div class="ttdef"><b>Definition:</b> <a href="_fire_tracker_chenebert_8h_source.html#l00115">FireTrackerChenebert.h:115</a></div></div>
<div class="ttc" id="class_fire_tracker_chenebert_html_addfad480395fa1a2af767e8efefb8980"><div class="ttname"><a href="class_fire_tracker_chenebert.html#addfad480395fa1a2af767e8efefb8980">FireTrackerChenebert::FireTrackerChenebert</a></div><div class="ttdeci">FireTrackerChenebert(std::string region_classification_model)</div><div class="ttdef"><b>Definition:</b> <a href="_fire_tracker_chenebert_8cpp_source.html#l00314">FireTrackerChenebert.cpp:314</a></div></div>
<div class="ttc" id="class_fire_tracker_chenebert_html_a41191012c3a576338e0a1c18e4670e03"><div class="ttname"><a href="class_fire_tracker_chenebert.html#a41191012c3a576338e0a1c18e4670e03">FireTrackerChenebert::spatial_data</a></div><div class="ttdeci">std::vector&lt; std::vector&lt; float &gt; &gt; spatial_data</div><div class="ttdoc">vector with the statistics for each contour </div><div class="ttdef"><b>Definition:</b> <a href="_fire_tracker_chenebert_8h_source.html#l00098">FireTrackerChenebert.h:98</a></div></div>
<div class="ttc" id="class_fire_tracker_chenebert_html_ae1ccd303e827f5d00620e54bb11a968c"><div class="ttname"><a href="class_fire_tracker_chenebert.html#ae1ccd303e827f5d00620e54bb11a968c">FireTrackerChenebert::getLastTrack</a></div><div class="ttdeci">const std::vector&lt; std::vector&lt; cv::Point &gt; &gt; &amp; getLastTrack()</div><div class="ttdoc">Get the last track. </div><div class="ttdef"><b>Definition:</b> <a href="_fire_tracker_chenebert_8cpp_source.html#l00040">FireTrackerChenebert.cpp:40</a></div></div>
<div class="ttc" id="class_fire_tracker_chenebert_html_ac139cc55cf55def96683867873bc9841"><div class="ttname"><a href="class_fire_tracker_chenebert.html#ac139cc55cf55def96683867873bc9841">FireTrackerChenebert::color_classified</a></div><div class="ttdeci">cv::Mat color_classified</div><div class="ttdoc">stores the color classified regions on the last frame </div><div class="ttdef"><b>Definition:</b> <a href="_fire_tracker_chenebert_8h_source.html#l00095">FireTrackerChenebert.h:95</a></div></div>
<div class="ttc" id="class_fire_tracker_chenebert_html_ab233da15b6c7aad7d83c67057a558bd4"><div class="ttname"><a href="class_fire_tracker_chenebert.html#ab233da15b6c7aad7d83c67057a558bd4">FireTrackerChenebert::update</a></div><div class="ttdeci">void update(const VisionCore::Frame&lt; cv::Mat &gt; &amp;frame)</div><div class="ttdoc">Given an image (i.e. video frame), update the tracked objects. </div><div class="ttdef"><b>Definition:</b> <a href="_fire_tracker_chenebert_8cpp_source.html#l00047">FireTrackerChenebert.cpp:47</a></div></div>
<div class="ttc" id="class_fire_tracker_chenebert_html_ab323eee4bdbac7f3d9783aa7840440ef"><div class="ttname"><a href="class_fire_tracker_chenebert.html#ab323eee4bdbac7f3d9783aa7840440ef">FireTrackerChenebert::~FireTrackerChenebert</a></div><div class="ttdeci">~FireTrackerChenebert(void)</div><div class="ttdoc">Destructor. </div><div class="ttdef"><b>Definition:</b> <a href="_fire_tracker_chenebert_8cpp_source.html#l00323">FireTrackerChenebert.cpp:323</a></div></div>
<div class="ttc" id="struct_vision_core_1_1_data_structures_1_1_frame_html"><div class="ttname"><a href="struct_vision_core_1_1_data_structures_1_1_frame.html">VisionCore::DataStructures::Frame&lt; cv::Mat &gt;</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_08f45fe6822aeb4ce2bc268e3b1361be.html">Components</a></li><li class="navelem"><a class="el" href="dir_a61f198d05b3512ab3b81e6e6e82d3ea.html">FireDetector</a></li><li class="navelem"><b>FireTrackerChenebert.cpp</b></li>
    <li class="footer">Generated on Wed Nov 18 2015 11:12:06 for CvWorks by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.10 </li>
  </ul>
</div>
</body>
</html>
