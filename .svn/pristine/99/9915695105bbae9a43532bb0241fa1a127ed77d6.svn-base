\hypertarget{class_vision_core_1_1_async_1_1_async_frame_server_wrap}{}\section{Async\+Frame\+Server\+Wrap$<$ T\+Img $>$ Class Template Reference}
\label{class_vision_core_1_1_async_1_1_async_frame_server_wrap}\index{Async\+Frame\+Server\+Wrap$<$ T\+Img $>$@{Async\+Frame\+Server\+Wrap$<$ T\+Img $>$}}


Allows the execution of a frame server asynchronously in an individual thread.  




{\ttfamily \#include $<$Vision\+Async.\+h$>$}



Collaboration diagram for Async\+Frame\+Server\+Wrap$<$ T\+Img $>$\+:
\nopagebreak
\begin{figure}[H]
\begin{center}
\leavevmode
\includegraphics[width=223pt]{class_vision_core_1_1_async_1_1_async_frame_server_wrap__coll__graph}
\end{center}
\end{figure}
\subsection*{Public Member Functions}
\begin{DoxyCompactItemize}
\item 
\hypertarget{class_vision_core_1_1_async_1_1_async_frame_server_wrap_ae8ba94875d13625942e6e478b28fc19b}{}\hyperlink{class_vision_core_1_1_async_1_1_async_frame_server_wrap_ae8ba94875d13625942e6e478b28fc19b}{Async\+Frame\+Server\+Wrap} (\hyperlink{class_vision_core_1_1_interfaces_1_1_frame_server}{Frame\+Server}$<$ T\+Img $>$ $\ast$frame\+Server, int frames\+Per\+Second=-\/1)\label{class_vision_core_1_1_async_1_1_async_frame_server_wrap_ae8ba94875d13625942e6e478b28fc19b}

\begin{DoxyCompactList}\small\item\em Constructor. \end{DoxyCompactList}\item 
\hypertarget{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a04c264bb27b2ac35a81be42f772e0b52}{}virtual \hyperlink{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a04c264bb27b2ac35a81be42f772e0b52}{$\sim$\+Async\+Frame\+Server\+Wrap} ()\label{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a04c264bb27b2ac35a81be42f772e0b52}

\begin{DoxyCompactList}\small\item\em Destructor method. \end{DoxyCompactList}\item 
void \hyperlink{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a60de64d75454385b23995437f1d72669}{start} ()
\begin{DoxyCompactList}\small\item\em Start frame capturing in a individual thread. \end{DoxyCompactList}\item 
\hypertarget{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a8c528baf37154d347366083f0f816846}{}void \hyperlink{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a8c528baf37154d347366083f0f816846}{stop} ()\label{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a8c528baf37154d347366083f0f816846}

\begin{DoxyCompactList}\small\item\em Stops the capture of new frames (works as a pause). \end{DoxyCompactList}\item 
\hypertarget{class_vision_core_1_1_async_1_1_async_frame_server_wrap_ade061155643ea9800e0d385caa9ddc5a}{}bool \hyperlink{class_vision_core_1_1_async_1_1_async_frame_server_wrap_ade061155643ea9800e0d385caa9ddc5a}{started} () const \label{class_vision_core_1_1_async_1_1_async_frame_server_wrap_ade061155643ea9800e0d385caa9ddc5a}

\begin{DoxyCompactList}\small\item\em Indicates if the frames are being captured. \end{DoxyCompactList}\item 
\hypertarget{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a8222e52df762c74ec229eba833a6d310}{}bool \hyperlink{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a8222e52df762c74ec229eba833a6d310}{finished} () const \label{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a8222e52df762c74ec229eba833a6d310}

\begin{DoxyCompactList}\small\item\em Indicates if the video reached the end. \end{DoxyCompactList}\item 
\hypertarget{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a954ec16b07c6dffd3e6fa1c19adde9a7}{}std\+::shared\+\_\+ptr$<$ \hyperlink{struct_vision_core_1_1_data_structures_1_1_frame}{Frame}$<$ T\+Img $>$ $>$ \hyperlink{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a954ec16b07c6dffd3e6fa1c19adde9a7}{get\+Current\+Frame} ()\label{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a954ec16b07c6dffd3e6fa1c19adde9a7}

\begin{DoxyCompactList}\small\item\em Returns the most recent captured frame. \end{DoxyCompactList}\item 
\hypertarget{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a142af7cc4e4839ba5f6db05cc3f5d783}{}void \hyperlink{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a142af7cc4e4839ba5f6db05cc3f5d783}{lock\+Current\+Frame} ()\label{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a142af7cc4e4839ba5f6db05cc3f5d783}

\begin{DoxyCompactList}\small\item\em Blocks the access to last captured frame to the trhead that called this function. \end{DoxyCompactList}\item 
\hypertarget{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a246fb6f2273f5066fab7e6cfcb01f322}{}void \hyperlink{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a246fb6f2273f5066fab7e6cfcb01f322}{unlock\+Current\+Frame} ()\label{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a246fb6f2273f5066fab7e6cfcb01f322}

\begin{DoxyCompactList}\small\item\em Releases the captured frames to other threads. \end{DoxyCompactList}\item 
\hypertarget{class_vision_core_1_1_async_1_1_async_frame_server_wrap_abd8ac6727051c47ac2b8d695efc63603}{}std\+::thread $\ast$ \hyperlink{class_vision_core_1_1_async_1_1_async_frame_server_wrap_abd8ac6727051c47ac2b8d695efc63603}{get\+Thread\+Ptr} ()\label{class_vision_core_1_1_async_1_1_async_frame_server_wrap_abd8ac6727051c47ac2b8d695efc63603}

\begin{DoxyCompactList}\small\item\em Returns a pointer to the internal thread exececuting frame capture. \end{DoxyCompactList}\item 
\hypertarget{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a2f76fa0062ff4d405b8296b356ec6833}{}std\+::condition\+\_\+variable \& \hyperlink{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a2f76fa0062ff4d405b8296b356ec6833}{get\+New\+Frame\+Cond\+Var} ()\label{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a2f76fa0062ff4d405b8296b356ec6833}

\begin{DoxyCompactList}\small\item\em Returns the conditional variable used to notify other threads that a new frame was captured. \end{DoxyCompactList}\item 
\hypertarget{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a6c5641dc8b269eee5a0bf7d2e47ed9ed}{}void \hyperlink{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a6c5641dc8b269eee5a0bf7d2e47ed9ed}{set\+Callback} (const std\+::function$<$ void(std\+::shared\+\_\+ptr$<$ \hyperlink{struct_vision_core_1_1_data_structures_1_1_frame}{Frame}$<$ T\+Img $>$$>$)$>$ \&callback)\label{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a6c5641dc8b269eee5a0bf7d2e47ed9ed}

\begin{DoxyCompactList}\small\item\em Sets a callback function that is executed after every frame capture. \end{DoxyCompactList}\item 
\hypertarget{class_vision_core_1_1_async_1_1_async_frame_server_wrap_ae765905307a24758f1ed460be1fd80b2}{}void \hyperlink{class_vision_core_1_1_async_1_1_async_frame_server_wrap_ae765905307a24758f1ed460be1fd80b2}{add\+Callback} (const std\+::function$<$ void(std\+::shared\+\_\+ptr$<$ \hyperlink{struct_vision_core_1_1_data_structures_1_1_frame}{Frame}$<$ T\+Img $>$$>$)$>$ \&callback)\label{class_vision_core_1_1_async_1_1_async_frame_server_wrap_ae765905307a24758f1ed460be1fd80b2}

\begin{DoxyCompactList}\small\item\em Add a callback function that is executed after each capture. \end{DoxyCompactList}\item 
\hypertarget{class_vision_core_1_1_async_1_1_async_frame_server_wrap_ab212e28ba94abfba3af5cea45609a502}{}void \hyperlink{class_vision_core_1_1_async_1_1_async_frame_server_wrap_ab212e28ba94abfba3af5cea45609a502}{set\+Frames\+To\+Capture} (const int quantity)\label{class_vision_core_1_1_async_1_1_async_frame_server_wrap_ab212e28ba94abfba3af5cea45609a502}

\begin{DoxyCompactList}\small\item\em Sets how many frames will be captured. The frame server will pause(stop) after capturing these frames. Negative values means no restriction. \end{DoxyCompactList}\item 
\hypertarget{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a064142ef99cfb7aaad5ba4eb51056ab7}{}void \hyperlink{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a064142ef99cfb7aaad5ba4eb51056ab7}{set\+Frame\+Server} (\hyperlink{class_vision_core_1_1_interfaces_1_1_frame_server}{Frame\+Server}$<$ T\+Img $>$ $\ast$fs)\label{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a064142ef99cfb7aaad5ba4eb51056ab7}

\begin{DoxyCompactList}\small\item\em Sets a new frame server. The old is not deleted. \end{DoxyCompactList}\item 
\hypertarget{class_vision_core_1_1_async_1_1_async_frame_server_wrap_aa4d334f33f49c61c9b3e306b60f4cc74}{}double \hyperlink{class_vision_core_1_1_async_1_1_async_frame_server_wrap_aa4d334f33f49c61c9b3e306b60f4cc74}{get\+Frames\+Per\+Second} () const \label{class_vision_core_1_1_async_1_1_async_frame_server_wrap_aa4d334f33f49c61c9b3e306b60f4cc74}

\begin{DoxyCompactList}\small\item\em Get the frames captured per second. \end{DoxyCompactList}\item 
\hypertarget{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a0d21ea1dd98cb2913cef820c71ab1e54}{}void \hyperlink{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a0d21ea1dd98cb2913cef820c71ab1e54}{set\+Frames\+Per\+Second} (double frames\+Per\+Second)\label{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a0d21ea1dd98cb2913cef820c71ab1e54}

\begin{DoxyCompactList}\small\item\em Sets the frames captured per second. If it is less or equal to 0 the capture will be as fast as possible (may be problematic for other threads processing the frames). \end{DoxyCompactList}\end{DoxyCompactItemize}


\subsection{Detailed Description}
\subsubsection*{template$<$class T\+Img$>$class Vision\+Core\+::\+Async\+::\+Async\+Frame\+Server\+Wrap$<$ T\+Img $>$}

Allows the execution of a frame server asynchronously in an individual thread. 

This class is a wrap for a Frame\+Server object that captures frames in a individual thread and notifies other trheads the frame capture (using std conditional variables). This way, other threads can access the captured frames by calling the \hyperlink{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a954ec16b07c6dffd3e6fa1c19adde9a7}{get\+Current\+Frame()} method.

It is also possible to set a callback function (\hyperlink{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a6c5641dc8b269eee5a0bf7d2e47ed9ed}{set\+Callback()} method) that is executed after every frame capture.\+s.


\begin{DoxyParams}{Parameters}
{\em T\+Img} & Image type. \\
\hline
\end{DoxyParams}


Definition at line 64 of file Vision\+Async.\+h.



\subsection{Member Function Documentation}
\hypertarget{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a60de64d75454385b23995437f1d72669}{}\index{Vision\+Core\+::\+Async\+::\+Async\+Frame\+Server\+Wrap@{Vision\+Core\+::\+Async\+::\+Async\+Frame\+Server\+Wrap}!start@{start}}
\index{start@{start}!Vision\+Core\+::\+Async\+::\+Async\+Frame\+Server\+Wrap@{Vision\+Core\+::\+Async\+::\+Async\+Frame\+Server\+Wrap}}
\subsubsection[{start()}]{\setlength{\rightskip}{0pt plus 5cm}void start (
\begin{DoxyParamCaption}
{}
\end{DoxyParamCaption}
)\hspace{0.3cm}{\ttfamily [inline]}}\label{class_vision_core_1_1_async_1_1_async_frame_server_wrap_a60de64d75454385b23995437f1d72669}


Start frame capturing in a individual thread. 

The frames are captured from the internal Frame\+Server object continuously. While capturing is active, other threads are notified of a capture using the conditional variable. 

Definition at line 77 of file Vision\+Async.\+h.



The documentation for this class was generated from the following file\+:\begin{DoxyCompactItemize}
\item 
D\+:/\+F\+U\+R\+G/\+Software/\+Cv\+Works\+Release1/\+Core/\+Vision/Vision\+Async.\+h\end{DoxyCompactItemize}
