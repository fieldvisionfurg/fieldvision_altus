<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>CvWorks: VisionTests/main.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="C3.jpg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">CvWorks
   &#160;<span id="projectnumber">0.4</span>
   </div>
   <div id="projectbrief">Computer Vision Framework</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_vision_tests_2main_8cpp-example.html','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">VisionTests/main.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<p>Contains several examples for CvWorks methods. Each function is a complete example.</p>
<div class="fragment"><div class="line"></div>
<div class="line"></div>
<div class="line"><span class="preprocessor">#include &quot;VisionImplementationCv.h&quot;</span></div>
<div class="line"><span class="preprocessor">#include &quot;FireDetectorCv.h&quot;</span></div>
<div class="line"></div>
<div class="line"><span class="keyword">using namespace </span><a class="code" href="namespace_vision_core.html">VisionCore</a>;</div>
<div class="line"><span class="keyword">using namespace </span><a class="code" href="namespace_viscv.html">Viscv</a>;</div>
<div class="line"></div>
<div class="line"><span class="comment">// Example showing the execution of a detector.</span></div>
<div class="line"><span class="comment">/* This example runs a ColorBlobDetector, which segments blobs in the image within a</span></div>
<div class="line"><span class="comment">given color range. The blobs are represented by their contour as a vector of points.</span></div>
<div class="line"><span class="comment">*/</span></div>
<div class="line"><span class="keywordtype">void</span> testColorBlobDetector(){</div>
<div class="line">    <span class="comment">// Defines a contour</span></div>
<div class="line">    <span class="keyword">typedef</span> std::vector&lt;cv::Point&gt; Contours;</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Create a frame server. By default it will try to open the first webcam.</span></div>
<div class="line">    <a name="_a0"></a><a class="code" href="class_viscv_1_1_frame_server_cv.html">FrameServerCv</a> frameServer;</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Create a color blob detector.</span></div>
<div class="line">    <a name="_a1"></a><a class="code" href="class_viscv_1_1_color_blob_detector_h_f.html">ColorBlobDetectorHF</a> detector;</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Creates a window for simple visualisation of results.</span></div>
<div class="line">    <a name="_a2"></a><a class="code" href="class_viscv_1_1_cv_image_g_u_i.html">CvImageGUI</a> gui;</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Loop over frames</span></div>
<div class="line">    <span class="keywordflow">while</span>(frameServer.<a name="a3"></a><a class="code" href="class_viscv_1_1_frame_server_cv.html#a634d758e1811c32295f5665e4f8a0178">hasNext</a>()){</div>
<div class="line">        <span class="comment">// Capture frame.</span></div>
<div class="line">        Frame&lt;cv::Mat&gt; frame = frameServer.<a name="a4"></a><a class="code" href="class_viscv_1_1_frame_server_cv.html#a9ad5d34c4a7364130b2da00adc8f8638">captureFrame</a>();</div>
<div class="line"></div>
<div class="line">        <span class="comment">// Perform detection</span></div>
<div class="line">        std::vector&lt;Contours&gt; blobs = detector.<a name="a5"></a><a class="code" href="class_viscv_1_1_color_blob_detector_h_f.html#a76311b08b5cb9df65524e070e9c15048">detect</a>(frame.getImg());</div>
<div class="line"></div>
<div class="line">        <span class="comment">// Visualization of results.</span></div>
<div class="line">        gui.<a name="a6"></a><a class="code" href="class_viscv_1_1_cv_image_g_u_i.html#a4ae2d7fd59643d69dfe83dff37582501">setImg</a>(frame.getImg());</div>
<div class="line">        gui.<a name="a7"></a>draw(blobs);</div>
<div class="line">        gui.<a name="a8"></a>show();</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"></div>
<div class="line"><span class="comment">// Example showing how to create a multi-tracker based on a detector.</span></div>
<div class="line"><span class="comment">/* This example first creates a face detector based on ObjectDetectorCCCv method (which is a</span></div>
<div class="line"><span class="comment"> * wrap for OpenCv haar cascade detector).</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * Based on this detector, a tracker for multiple faces is created. The DetectorBasedMultiTracker class</span></div>
<div class="line"><span class="comment"> * can keep a track of faces along a video. This class can be used with any generic detector.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * \see DetectorBasedMultiTracker</span></div>
<div class="line"><span class="comment">*/</span></div>
<div class="line"><span class="keywordtype">void</span> testDetectorBasedTracker(){</div>
<div class="line">    <span class="keyword">typedef</span> cv::Mat TImg;</div>
<div class="line">    <span class="keyword">typedef</span> cv::Rect TObj;</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Create a frame server. By default it will try to open the first webcam.</span></div>
<div class="line">    FrameServer&lt;TImg&gt; &amp;frameServer = <a class="code" href="class_viscv_1_1_frame_server_cv.html">FrameServerCv</a>();</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Create a face detector</span></div>
<div class="line">    std::string cascadeFile = <span class="stringliteral">&quot;..\\..\\ExternalLibraries\\OpenCV2.4.9\\data\\haarcascades\\haarcascade_frontalface_default.xml&quot;</span>;</div>
<div class="line">    Detector&lt;TImg,TObj&gt; &amp;detector = <a name="_a9"></a><a class="code" href="class_viscv_1_1_object_detector_c_c_cv.html">ObjectDetectorCCCv</a>(cascadeFile);</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Create a multiple face tracker using the generic detector based multi tracker.</span></div>
<div class="line">    DetectorBasedMultiTracker&lt;TImg,TObj&gt; tracker(&amp;detector);</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Start processing frames</span></div>
<div class="line">    <a class="code" href="class_viscv_1_1_cv_image_g_u_i.html">CvImageGUI</a> gui;</div>
<div class="line">    <span class="keywordflow">while</span>(frameServer.hasNext()){</div>
<div class="line">        <span class="comment">// Capture frame</span></div>
<div class="line">        Frame&lt;TImg&gt; frame = frameServer.captureFrame();</div>
<div class="line"></div>
<div class="line">        <span class="comment">// Update tracker</span></div>
<div class="line">        tracker.update(frame);</div>
<div class="line">        <span class="keyword">auto</span> objects=tracker.getLastTrack();</div>
<div class="line"></div>
<div class="line">        <span class="comment">// Draw results</span></div>
<div class="line">        gui.<a class="code" href="class_viscv_1_1_cv_image_g_u_i.html#a4ae2d7fd59643d69dfe83dff37582501">setImg</a>(frame.getImg());</div>
<div class="line">        gui.draw(objects);</div>
<div class="line">        gui.show();</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"></div>
<div class="line"><span class="comment">// Example showing a multi-tracker based on abstract class AbstractAutoTracker.</span></div>
<div class="line"><span class="comment">/* This example runs a multi-face tracker implemented in class MultiObjectTrackerCCCv.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This class is derived from AbstractAutoTracker, which provides a base implementation for automaticly</span></div>
<div class="line"><span class="comment"> * detecting new objects and managing a pool of individual trackers.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * \see AbstractAutoTracker</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment">*/</span></div>
<div class="line"><span class="keywordtype">void</span> testMultiTracker(){</div>
<div class="line">    <span class="keyword">typedef</span> cv::Mat TImg;</div>
<div class="line">    <span class="keyword">typedef</span> cv::Rect TObj;</div>
<div class="line"></div>
<div class="line">     <span class="comment">// Create a frame server. By default it will try to open the first webcam.</span></div>
<div class="line">    FrameServer&lt;TImg&gt; &amp;frameServer = <a class="code" href="class_viscv_1_1_frame_server_cv.html">FrameServerCv</a>();</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Create a multiple face tracker.</span></div>
<div class="line">    std::string cascadeFile = <span class="stringliteral">&quot;..\\..\\ExternalLibraries\\OpenCV2.4.9\\data\\haarcascades\\haarcascade_frontalface_default.xml&quot;</span>;</div>
<div class="line">    AbstractAutoTracker&lt;TImg,TObj&gt; &amp;track = <a name="_a10"></a><a class="code" href="class_viscv_1_1_multi_object_tracker_c_c_cv.html">MultiObjectTrackerCCCv</a>(cascadeFile);</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Start processing frames</span></div>
<div class="line">    <a class="code" href="class_viscv_1_1_cv_image_g_u_i.html">CvImageGUI</a> gui;</div>
<div class="line">    <span class="keywordflow">while</span>(frameServer.hasNext()){</div>
<div class="line">        <span class="comment">// Capture frame.</span></div>
<div class="line">        Frame&lt;TImg&gt; frame = frameServer.captureFrame();</div>
<div class="line"></div>
<div class="line">        <span class="comment">// Update tracker</span></div>
<div class="line">        track.update(frame);</div>
<div class="line">        <span class="keyword">auto</span> objects=track.getLastTrack();</div>
<div class="line"></div>
<div class="line">        <span class="comment">// Draw results</span></div>
<div class="line">        gui.<a class="code" href="class_viscv_1_1_cv_image_g_u_i.html#a4ae2d7fd59643d69dfe83dff37582501">setImg</a>(frame.getImg());</div>
<div class="line">        <span class="keywordflow">for</span>(<span class="keyword">const</span> std::pair&lt;long,TObj&gt;&amp; t : objects)</div>
<div class="line">            gui.draw(t.second);</div>
<div class="line">        gui.show();</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"><span class="keywordtype">void</span> testCircleDetector(){</div>
<div class="line">    FrameServer&lt;cv::Mat&gt; &amp;frameServer = <a class="code" href="class_viscv_1_1_frame_server_cv.html">FrameServerCv</a>();</div>
<div class="line">    <a name="_a11"></a><a class="code" href="class_viscv_1_1_circle_detector_h_t_c_f.html">CircleDetectorHTCF</a> circleDetector;</div>
<div class="line"></div>
<div class="line">    <a class="code" href="class_viscv_1_1_cv_image_g_u_i.html">CvImageGUI</a> gui;</div>
<div class="line">    <span class="keywordflow">while</span>(frameServer.hasNext()){</div>
<div class="line">        Frame&lt;cv::Mat&gt; frame = frameServer.captureFrame();</div>
<div class="line">        std::vector&lt;Circle&lt;&gt;&gt; circles = circleDetector.<a name="a12"></a><a class="code" href="class_viscv_1_1_circle_detector_h_t_c_f.html#ad8f008988f0c246f86a192f8c17c3a88">detect</a>(frame.getImg());</div>
<div class="line"></div>
<div class="line">        gui.<a class="code" href="class_viscv_1_1_cv_image_g_u_i.html#a4ae2d7fd59643d69dfe83dff37582501">setImg</a>(frame.getImg());</div>
<div class="line">        gui.draw(circles);</div>
<div class="line">        gui.show();</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"></div>
<div class="line"><span class="comment">// Example showing the execution of a frame server and a detector in separate threads.</span></div>
<div class="line"><span class="comment">/* This example shows how to use the asynchronous execution provided by CvWorks.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * First a frame server is created and wrapped in a AsyncFrameServerWrap object, which runs it in a</span></div>
<div class="line"><span class="comment"> * individual thread.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * Then a face detector is created and wrapped in a AsyncDetectorWrap.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * \see AsyncFrameServerWrap AsyncDetectorWrap</span></div>
<div class="line"><span class="comment">*/</span></div>
<div class="line"><span class="keywordtype">void</span> asyncTest(){</div>
<div class="line">    <a class="code" href="class_viscv_1_1_cv_image_g_u_i.html">CvImageGUI</a> gui;</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Create an AsyncFrameServer from webcam</span></div>
<div class="line">    FrameServer&lt;cv::Mat&gt; &amp;frameServer = <a class="code" href="class_viscv_1_1_frame_server_cv.html">FrameServerCv</a>();</div>
<div class="line">    AsyncFrameServerWrap&lt;cv::Mat&gt; asyncFS(&amp;frameServer);</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Set callback when frame is capture. Set the frame for visualization.</span></div>
<div class="line">    asyncFS.setCallback([&amp;](std::shared_ptr&lt;Frame&lt;cv::Mat&gt;&gt; framePtr){</div>
<div class="line">        gui.<a class="code" href="class_viscv_1_1_cv_image_g_u_i.html#a4ae2d7fd59643d69dfe83dff37582501">setImg</a>(framePtr-&gt;getImg());</div>
<div class="line">    });</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Create an AsyncDetector</span></div>
<div class="line">    <a class="code" href="class_viscv_1_1_object_detector_c_c_cv.html">ObjectDetectorCCCv</a> detector(<span class="stringliteral">&quot;..\\..\\ExternalLibraries\\OpenCV2.4.9\\data\\haarcascades\\haarcascade_frontalface_default.xml&quot;</span>);</div>
<div class="line">    AsyncDetectorWrap&lt;cv::Mat,cv::Rect&gt; asyncDet(&amp;asyncFS,&amp;detector);</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Set the callback function that is called when objects are detected</span></div>
<div class="line">    asyncDet.setCallback([&amp;](std::vector&lt;cv::Rect&gt; det){</div>
<div class="line">        std::cout&lt;&lt;<span class="stringliteral">&quot;Face detected!!!\n\n&quot;</span>;</div>
<div class="line">        gui.draw(det);</div>
<div class="line">        <span class="comment">//gui.show(); // doesn&#39;t work (probably because gui was created on a different thread)</span></div>
<div class="line">        cv::imshow(<span class="stringliteral">&quot;Async Detection&quot;</span>,gui.<a name="a13"></a><a class="code" href="class_viscv_1_1_cv_image_g_u_i.html#a128346d089624c27ffddb80f0526dc24">getImg</a>());</div>
<div class="line">        cv::waitKey(1);</div>
<div class="line">    });</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Start frame server and detector</span></div>
<div class="line">    asyncDet.start();</div>
<div class="line">    asyncFS.start();</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Wait for the AsyncFrameServer thread to finish</span></div>
<div class="line">    asyncFS.getThreadPtr()-&gt;join();</div>
<div class="line">    std::cout&lt;&lt;<span class="stringliteral">&quot;Finished.&quot;</span>;</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"></div>
<div class="line"><span class="comment">/* Callback function to get a rectangle clicked in a image.*/</span></div>
<div class="line">cv::Point firstPoint;</div>
<div class="line">cv::Point secondPoint;</div>
<div class="line"><span class="keywordtype">int</span> clickCount = 0;</div>
<div class="line"><span class="keywordtype">bool</span> rectReady=<span class="keyword">false</span>;</div>
<div class="line"></div>
<div class="line"><span class="keywordtype">void</span> onMouse( <span class="keywordtype">int</span> event, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keywordtype">int</span>, <span class="keywordtype">void</span>* )</div>
<div class="line">{</div>
<div class="line">    <span class="keywordflow">if</span>( event != cv::EVENT_LBUTTONDOWN )</div>
<div class="line">        <span class="keywordflow">return</span>;</div>
<div class="line">    clickCount++;</div>
<div class="line">    <span class="keywordflow">if</span>(clickCount==1){</div>
<div class="line">        firstPoint = cv::Point(x,y);</div>
<div class="line">        rectReady=<span class="keyword">false</span>;</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">if</span>(clickCount==2){</div>
<div class="line">        secondPoint = cv::Point(x,y);</div>
<div class="line">        clickCount=0;</div>
<div class="line">        rectReady=<span class="keyword">true</span>;</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"></div>
<div class="line"><span class="comment">// Example showing the use of feature matching object detector.</span></div>
<div class="line"><span class="comment">/* This example shows how to use the ObjectDetectorFMCv class.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * The user has to click on the top left corner and botton right corner</span></div>
<div class="line"><span class="comment"> * to define a rectangle containing the object to be detected.</span></div>
<div class="line"><span class="comment"> * This object is passed to the detector by calling setTargetImage().</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * \see ObjectDetectorFMCv</span></div>
<div class="line"><span class="comment">*/</span></div>
<div class="line"><span class="keywordtype">void</span> testObjectDetectorFMCv(){</div>
<div class="line">    FrameServer&lt;cv::Mat&gt; &amp;frameServer = <a class="code" href="class_viscv_1_1_frame_server_cv.html">FrameServerCv</a>();</div>
<div class="line">    <a name="_a14"></a><a class="code" href="class_viscv_1_1_object_detector_f_m_cv.html">ObjectDetectorFMCv</a> detector;</div>
<div class="line"></div>
<div class="line">    <a class="code" href="class_viscv_1_1_cv_image_g_u_i.html">CvImageGUI</a> gui;</div>
<div class="line">    <span class="comment">// defines callback for image click</span></div>
<div class="line">    cv::setMouseCallback(gui.<a name="a15"></a><a class="code" href="class_viscv_1_1_cv_image_g_u_i.html#afb48ea0df1b0f3d228839536031af917">getWindowName</a>(),onMouse);</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">while</span>(frameServer.hasNext()){</div>
<div class="line">        Frame&lt;cv::Mat&gt; frame = frameServer.captureFrame();</div>
<div class="line"></div>
<div class="line">        <span class="comment">// when two clicks, defines object to detect</span></div>
<div class="line">        <span class="keywordflow">if</span>(rectReady){</div>
<div class="line">            cv::Mat img = frame.<a class="code" href="class_viscv_1_1_cv_image_g_u_i.html#a128346d089624c27ffddb80f0526dc24">getImg</a>();</div>
<div class="line">            cv::Rect ROI(firstPoint,secondPoint);</div>
<div class="line">            detector.<a name="a16"></a>setTargetImage(img(ROI));</div>
<div class="line">            rectReady=<span class="keyword">false</span>;</div>
<div class="line">        }</div>
<div class="line"></div>
<div class="line">        <span class="comment">//detect</span></div>
<div class="line">        std::vector&lt;cv::Rect&gt; obj = detector.<a name="a17"></a><a class="code" href="class_viscv_1_1_object_detector_f_m_cv.html#a1d0c071b6e7a19b192c86ca0e47fd642">detect</a>(frame.getImg());</div>
<div class="line"></div>
<div class="line">        <span class="comment">//shows result</span></div>
<div class="line">        gui.<a class="code" href="class_viscv_1_1_cv_image_g_u_i.html#a4ae2d7fd59643d69dfe83dff37582501">setImg</a>(frame.getImg());</div>
<div class="line">        gui.draw(obj);</div>
<div class="line">        gui.show();</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"></div>
<div class="line"><span class="comment">// Example showing the evaluation of a detector.</span></div>
<div class="line"><span class="comment">/* This example shows the evaluation of a face detector.</span></div>
<div class="line"><span class="comment"> * The detector is an ObjectDetectorCCCv object (which is a simple wrap for OpenCv</span></div>
<div class="line"><span class="comment"> * haar cascade detector).</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * The class DatasetFDDB implements interface DetectionDataset, providing generic access to the FDDB face</span></div>
<div class="line"><span class="comment"> * dataset.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * Then the generic DetectorEvaluator class is used to evaluate the detector.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * \see DetectorEvaluator DetectionDataset</span></div>
<div class="line"><span class="comment">*/</span></div>
<div class="line"><span class="keywordtype">void</span> testFDDBDataset(){</div>
<div class="line">    <span class="comment">// Creates dataset</span></div>
<div class="line">   <a name="_a18"></a><a class="code" href="class_viscv_1_1_dataset_f_d_d_b.html">DatasetFDDB</a> db(<span class="stringliteral">&quot;C:/Datasets/FDDB/&quot;</span>,<span class="stringliteral">&quot;C:/Datasets/FDDB/FDDB-fold-01-ellipseList.txt&quot;</span>);</div>
<div class="line"></div>
<div class="line">   <span class="comment">// Creates detector</span></div>
<div class="line">   <a class="code" href="class_viscv_1_1_object_detector_c_c_cv.html">ObjectDetectorCCCv</a> det(<span class="stringliteral">&quot;../../ExternalLibraries/OpenCV2.4.9/data/haarcascades/haarcascade_frontalface_default.xml&quot;</span>);</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Defines the similarity between two rectangles as the proportion of intersection between them.</span></div>
<div class="line">    std::function&lt;double(const cv::Rect &amp;r1,const cv::Rect &amp;r2)&gt; simFc = [](<span class="keyword">const</span> cv::Rect &amp;r1,<span class="keyword">const</span> cv::Rect &amp;r2){</div>
<div class="line">        <span class="keywordtype">double</span> areaR1=r1.area();</div>
<div class="line">        <span class="keywordtype">double</span> areaR2=r2.area();</div>
<div class="line">        <span class="keywordtype">double</span> areaIntrsect=(r1 &amp; r2).area(); <span class="comment">//intersection area</span></div>
<div class="line">        <span class="keywordtype">double</span> similarity = areaIntrsect / (areaR1+areaR2-areaIntrsect);</div>
<div class="line">        <span class="keywordflow">return</span> similarity;</div>
<div class="line">    };</div>
<div class="line"></div>
<div class="line"></div>
<div class="line">    <span class="comment">// Create the evaluator, passing the dataset, detector and similarity function. A report is printed at the end.</span></div>
<div class="line">    DetectorEvaluator&lt;cv::Mat,cv::Rect&gt; evaluator;</div>
<div class="line">    evaluator.evaluateDetector(det,db,simFc);</div>
<div class="line"></div>
<div class="line">    <span class="comment">// The evaluation is done.</span></div>
<div class="line">    <span class="comment">// Just as a visualization example, iterates again over the dataset showing the dataset</span></div>
<div class="line">    <span class="comment">// objects and the result of detections.</span></div>
<div class="line">    <a class="code" href="class_viscv_1_1_cv_image_g_u_i.html">CvImageGUI</a> gui;</div>
<div class="line">    db.forEachSample([&amp;](cv::Mat&amp; img,std::vector&lt;cv::Rect&gt;&amp; objects,<span class="keyword">const</span> std::string&amp; sampleID){</div>
<div class="line">        gui.<a class="code" href="class_viscv_1_1_cv_image_g_u_i.html#a4ae2d7fd59643d69dfe83dff37582501">setImg</a>(img);</div>
<div class="line">        gui.draw(det.detect(img));</div>
<div class="line">        gui.draw(objects);</div>
<div class="line">        gui.show();</div>
<div class="line">    });</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"></div>
<div class="line"><span class="comment">// Example showing the generic tracker logger usage.</span></div>
<div class="line"><span class="comment">/* This example shows the usage of TrackerLogger class.</span></div>
<div class="line"><span class="comment"> * First a multiple face tracker is created based on haar cascade classifier.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * Then it is wrapped on a TrackerLogger, which provides transparent logging functionalities.</span></div>
<div class="line"><span class="comment"> * Note that the tracking with the logger object is performed as any other tracker.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * After 100 frames the result is saved in a CSV file.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * \see TrackerLogger</span></div>
<div class="line"><span class="comment">*/</span></div>
<div class="line"><span class="keywordtype">void</span> testDetectionLogger()</div>
<div class="line">{</div>
<div class="line">    <span class="comment">// Create frame server from webcam</span></div>
<div class="line">    <a class="code" href="class_viscv_1_1_frame_server_cv.html">FrameServerCv</a> frameServer;</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Create multiple face tracking</span></div>
<div class="line">    std::string cascadeFile = <span class="stringliteral">&quot;..\\..\\ExternalLibraries\\OpenCV2.4.9\\data\\haarcascades\\haarcascade_frontalface_default.xml&quot;</span>;</div>
<div class="line">    <a class="code" href="class_viscv_1_1_multi_object_tracker_c_c_cv.html">MultiObjectTrackerCCCv</a> faceTracker(cascadeFile);</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Wrap tracker in a TrackerLogger.</span></div>
<div class="line">    TrackerLogger&lt;cv::Mat,MultiObjectTrackerCCCv::ObjType&gt; tracker(&amp;faceTracker);</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Start capturing frames</span></div>
<div class="line">    <a class="code" href="class_viscv_1_1_cv_image_g_u_i.html">CvImageGUI</a> gui;</div>
<div class="line">    <span class="keywordflow">while</span>(frameServer.<a class="code" href="class_viscv_1_1_frame_server_cv.html#a634d758e1811c32295f5665e4f8a0178">hasNext</a>()){</div>
<div class="line">        Frame&lt;cv::Mat&gt; frame = frameServer.<a class="code" href="class_viscv_1_1_frame_server_cv.html#a9ad5d34c4a7364130b2da00adc8f8638">captureFrame</a>();</div>
<div class="line"></div>
<div class="line">        <span class="comment">// Update tracker</span></div>
<div class="line">        tracker.update(frame);</div>
<div class="line"></div>
<div class="line">        <span class="comment">// Visualization</span></div>
<div class="line">        gui.<a class="code" href="class_viscv_1_1_cv_image_g_u_i.html#a4ae2d7fd59643d69dfe83dff37582501">setImg</a>(frame.getImg());</div>
<div class="line">        <span class="keywordflow">for</span>(<span class="keyword">const</span> std::pair&lt;long,cv::Rect&gt;&amp; t : tracker.getLastTrack())</div>
<div class="line">            gui.draw(t.second);</div>
<div class="line">        gui.show();</div>
<div class="line"></div>
<div class="line">        <span class="comment">// Stop after 100 frames</span></div>
<div class="line">        <span class="keywordflow">if</span>(frame.getNumber()&gt;100)</div>
<div class="line">            <span class="keywordflow">break</span>;</div>
<div class="line">    }</div>
<div class="line">    <span class="comment">// Write log to a CSV file</span></div>
<div class="line">    tracker.writeToFileAsCsv(<span class="stringliteral">&quot;test.txt&quot;</span>);</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"><span class="comment">// Simple tag detector example.</span></div>
<div class="line"><span class="keywordtype">void</span> testTagDetection(){</div>
<div class="line">    FrameServer&lt;cv::Mat&gt; &amp;frameServer = <a class="code" href="class_viscv_1_1_frame_server_cv.html">FrameServerCv</a>();</div>
<div class="line">    <a name="_a19"></a><a class="code" href="class_viscv_1_1_a_r_tag_detector_b_l_p.html">ARTagDetectorBLP</a> tagDetector;</div>
<div class="line"></div>
<div class="line">    <a class="code" href="class_viscv_1_1_cv_image_g_u_i.html">CvImageGUI</a> gui;</div>
<div class="line">    <span class="keywordflow">while</span>(frameServer.hasNext()){</div>
<div class="line">        Frame&lt;cv::Mat&gt; frame = frameServer.captureFrame();</div>
<div class="line">        std::vector&lt;ARTag&gt; tags = tagDetector.<a name="a20"></a><a class="code" href="class_viscv_1_1_a_r_tag_detector_b_l_p.html#a0065a0a0e3dbed236849bf406e6cde66">detect</a>(frame.getImg());</div>
<div class="line"></div>
<div class="line">        gui.<a class="code" href="class_viscv_1_1_cv_image_g_u_i.html#a4ae2d7fd59643d69dfe83dff37582501">setImg</a>(frame.getImg());</div>
<div class="line">        gui.draw(tags);</div>
<div class="line">        gui.show();</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"><span class="keywordtype">void</span> videoChenebertXProposed(){</div>
<div class="line"></div>
<div class="line">    std::function&lt;double(std::vector&lt;cv::Point&gt; &amp;dt, cv::Rect &amp;gt)&gt; simFc = [](std::vector&lt;cv::Point&gt; &amp;dt, cv::Rect &amp;gt){</div>
<div class="line">        cv::Rect dtr = cv::boundingRect(dt);</div>
<div class="line">        <span class="keywordtype">double</span> area_dtr= dtr.area();</div>
<div class="line">        <span class="keywordtype">double</span> areaIntrsect=(dtr &amp; gt).area();</div>
<div class="line">        <span class="keywordtype">double</span> similarity = areaIntrsect/area_dtr;</div>
<div class="line">        <span class="keywordflow">return</span> similarity;</div>
<div class="line">    };</div>
<div class="line"></div>
<div class="line">    <a name="_a21"></a><a class="code" href="class_dataset_fire.html">DatasetFire</a> db(<span class="stringliteral">&quot;../../Files/FireDataset/&quot;</span>);</div>
<div class="line"></div>
<div class="line">    <span class="comment">//Cria evaluator</span></div>
<div class="line">    TrackerEvaluator&lt;cv::Mat, std::vector&lt;cv::Point&gt;, cv::Rect&gt; evaluator;</div>
<div class="line">    evaluator.setSimilarityFunction(simFc);</div>
<div class="line"></div>
<div class="line">    <a name="_a22"></a><a class="code" href="class_fire_tracker_s_a.html">FireTrackerSA</a> tracker(<span class="stringliteral">&quot;../../Files/FireDataset/rf_classifiers/20150218_region_classification_model&quot;</span>,</div>
<div class="line">                          <span class="stringliteral">&quot;../../Files/FireDataset/rf_classifiers/color_classification_model&quot;</span>);</div>
<div class="line"></div>
<div class="line">    <a class="code" href="class_viscv_1_1_cv_image_g_u_i.html">CvImageGUI</a> gui;</div>
<div class="line">    <span class="keywordflow">for</span> (std::string s: db.getSamplesID()){</div>
<div class="line">        std::cout &lt;&lt; s&lt;&lt; std::endl;</div>
<div class="line">        FrameServer&lt;cv::Mat&gt; *fs = db.getFrameServer(s);</div>
<div class="line">        std::vector&lt;std::vector&lt;cv::Rect&gt;&gt; objects = db.getObjects(s);</div>
<div class="line">        <span class="keywordflow">while</span>(fs-&gt;hasNext()){</div>
<div class="line">            Frame&lt;cv::Mat&gt; f = fs-&gt;captureFrame();</div>
<div class="line">            gui.<a class="code" href="class_viscv_1_1_cv_image_g_u_i.html#a4ae2d7fd59643d69dfe83dff37582501">setImg</a>(f.getImg());</div>
<div class="line">            tracker.update(f);</div>
<div class="line">            gui.draw(objects.at(f.getNumber()));</div>
<div class="line">            gui.draw(tracker.getLastTrack());</div>
<div class="line">            gui.show();</div>
<div class="line">            cv::waitKey(1);</div>
<div class="line">        }</div>
<div class="line"></div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])</div>
<div class="line">{</div>
<div class="line">    <span class="comment">//testColorBlobDetector();</span></div>
<div class="line">    <span class="comment">//testCircleDetector();</span></div>
<div class="line">    testDetectorBasedTracker();</div>
<div class="line">    <span class="comment">//testMultiTracker();</span></div>
<div class="line">    <span class="comment">//testDetectionLogger();</span></div>
<div class="line">    <span class="comment">//asyncTest();</span></div>
<div class="line">    <span class="comment">//testFDDBDataset()</span></div>
<div class="line">    <span class="comment">//testTagDetection();</span></div>
<div class="line">    <span class="comment">//testObjectDetectorFMCv();</span></div>
<div class="line">    <span class="comment">//videoChenebertXProposed();</span></div>
<div class="line">    system (<span class="stringliteral">&quot;PAUSE&quot;</span>);</div>
<div class="line">}</div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Wed Nov 18 2015 11:12:06 for CvWorks by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.10 </li>
  </ul>
</div>
</body>
</html>
